/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var Map = require('astd/map');
var Set = require('astd/set');
var Node = require('./base/node');
var ASTException = require('../../language_parser/ast_exception');

// keep unique scope ids

var scopeLocalId = 1;

module Scope = proto (Node) {

    /**
     * @var Set localDeclarations references to declare in local scope
     */
    localDeclarations: null,

    /**
     * @var Map localReferences references created/known in local scope, mapped to their mangled name
     */
    localReferences: null,

    /**
     * @var Map usages usage statistics on variables
     */
    usages: null,

    constructor: func(string key, string value) {

        this.localDeclarations = new Set();
        this.localReferences = new Map();
        this.usages = new Map();
        Node->constructor(key, value);
    },

    /**
     * adds a reference to the current scope and returns the possibly mangled name of it
     *
     * @param string name input name
     * @param boolean declare create declaration at top of scope
     * @param boolean ignore ignore whether the reference already exists in this scope
     * @return string mangled name
     */
    addLocal: func(string name, boolean declare = true, boolean ignore = false) {

        if (ignore === false && this.getOwnRef(name) !== null) {
            throw new ASTException('Reference "' + name + '" already defined in local scope', this);
        }

        var localName = this.createLocalName(name);
        this.localReferences.set(name, localName);

        if (declare) {
            this.localDeclarations.add(localName);
        }

        return localName;
    },

    /**
     * returns possibly mangled name of given reference from exactly this scope
     *
     * @param string name name of the reference
     * @return string or null if not found in exactly this scope
     */
    getOwnRef: func(string name) {

        assert(this.localReferences instanceof Map);

        if (this.localReferences.has(name)) {
            return this.localReferences.get(name);
        }

        return null;
    },

    /**
     * returns possibly mangled name of given reference from this, a parent-scope or globals
     *
     * @param string name name of the reference
     * @param boolean checkGlobals
     * @return string or null if not found
     */
    getRef: func(string name, boolean checkGlobals = true) {

        // check locally first
    
        var scope = this.findRefScope(name);

        if (scope !== null) {
            return scope.getOwnRef(name);
        }

        // check globals
        
        if (checkGlobals) {
            var globalReferences = this.parser.transform.globalReferences;

            if (globalReferences.has(name)) {
                return globalReferences.get(name);
            }
        }

        return null;
    },

    /**
     * returns source-node containing var declarations for this scope's locals
     *
     * @return SourceNode
     */
    refsToSourceNode: func() {

        if (this.localDeclarations.empty) {
            return this.csn();
        } else {
            return this.csn([ 'var ', this.localDeclarations.toArray().join(', '), ';' + this.nl() ]);
        }
    },

    /**
     * creates a local name for given reference
     *
     * @param string name
     */
    createLocalName: func(string name) {

        var FunctionLiteral = require('./function_literal');
        var transform = this.parser.transform;
        var refName = null;

        // check for reserved names or names used in parent scopes that are not also JS-scopes

        if (transform.globalReservations.has(name)) {

            refName = name;

        } else {

            var scope = this;

            do {
                if ((refName = scope.getOwnRef(name)) !== null) {
                    break;
                }
            } while (scope instanceof FunctionLiteral === false && (scope = scope.findProto(Scope, FunctionLiteral, true, null)) !== null);
        }

        if (refName !== null) {
            return '___' + name + '_scp' + scopeLocalId++;
        }

        return name;
    }
};

// register with Node

Node::Scope = Scope;
