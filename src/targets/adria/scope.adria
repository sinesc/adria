/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var Map = require('astd/map');
var Node = require('./base/node');
var ASTException = require('../../language_parser/ast_exception');

// keep unique scope ids

var scopeLocalId = 1;

module Scope = proto (Node) {

    locals      : null,
    implicits   : null,

    constructor: func(string key, string value) {
        this.locals = new Map();
        this.implicits = new Map();
        Node->constructor(key, value);
    },

    addLocal: func(string name) {

        if (this.getOwnRef(name)) {
            throw new ASTException('Reference "' + name + '" already defined in local scope', this);
        }

        var localName = createLocalName.call(this, name);
        this.locals.set(name, localName);
        return localName;
    },

    addImplicit: func(string name, boolean ignore = false) {

        // implicits may not be defined in any parent scope

        if (ignore == false && (this.getOwnRef(name) || findRefScope.call(this, name) !== null)) {
            throw new ASTException('Reference "' + name + '" already defined in local scope', this);
        }

        this.implicits.set(name, name);
        return name;
    },

    getOwnRef: func(string name) {

        assert(this.locals instanceof Map);
        assert(this.implicits instanceof Map);

        if (this.locals.has(name)) {
            return this.locals.get(name);
        } else if (this.implicits.has(name)) {
            return this.implicits.get(name);
        }

        return null;
    },

    findRef: func(string name) {

        var scope, refName;

        if ((refName = this.getOwnRef(name)) !== null) {
            return refName;
        } else if ((scope = findRefScope.call(this, name)) !== null) {
            if ((refName = scope.getOwnRef(name)) !== null) {
                return refName;
            } else {
                assert(true, 'scope claimed to have local but did not');
            }
        }

        return null;
    },

    refsToSourceNode: func() {

        if (this.locals.empty) {
            return this.csn();
        } else {
            return this.csn([ 'var ', this.locals.values().join(', '), ';' + this.nl() ]);
        }
    },
};

// register with Node

Node::Scope = Scope;

var findRefScope = func(string name) {

    var scope = this;

    do {
        if (scope.getOwnRef(name) !== null) {
            return scope;
        }
    } while ((scope = scope.findScope(true)) !== null);

    return scope;
};

var createLocalName = func(string name) {

    var scope = findRefScope.call(this, name);

    if (scope !== null) {
        return '___' + name + '_scp' + scopeLocalId++;
    }

    return name;
};