/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var SourceNode = require('../../source_node');
var Scope = require('./scope');
var ASTException = require('../../language_parser/ast_exception');

var thisId = 1;

module FunctionLiteral = proto (Scope) {

    thisId              : 0,
    provideContext      : false,
    provideParent       : false,
    provideSelf         : false,

    /**
     * @var SourceNode function name
     */
    nameSN: null,

    /**
     * @var SourceNode mangled function name
     */
    mangledNameSN: null,

    /**
     * @var boolean function literals only register their names inside their own scope, statements publish the name to parent as well
     */
    registerWithParent: false,

    /**
     * @var Array extra code to be placed right below local declarations, usually handling special argument features
     */
    specialArgs: null,

    /**
     * extends Scope with special args and thisId support
     *
     * @param string key
     * @param string value
     */
    constructor: func(string key, string value) {

        this.specialArgs = [ ];
        Scope->constructor(key, value);
        this.thisId = thisId++;
    },

    toSourceNode: func() {

        // indent child content, compensate by not indenting at opening {

        this.nl(1);
        var result = this.csn();

        // determine own name, generate code before parameter list

        this.setLocalName();
        this.preParamList(result);

        // handle parameters

        result.add([ '(', this.get('param_list').toSourceNode(), ') {' + this.nl() ]);

        // prepare body part

        this.preBody(result);
        var body = this.get('body').toSourceNode();

        // set local variables and special parameters

        result.add(this.refsToSourceNode());

        for (var id in this.specialArgs) {
            result.add([ this.specialArgs[id], this.nl() ]);
        }

        // stored this-context

        if (this.provideContext) {
            result.add([ 'var ', this.storeContext(), ' = this;' + this.nl() ]);
        }

        // prepare parent/self lookup, if any of those keywords were used

        if (this.provideParent || this.provideSelf) {
            this.getParentLookupCode(result, this.nameSN !== null ? this.nameSN.toString() : '');
        }

        result.add(this.nl(0, result));
        result.add(body);

        // finalize body

        this.postBody(result);

        return result;
    },

    /**
     * called to generate the part before the parameter list
     *
     * @param SourceNode result
     */
    preParamList: func(SourceNode result) {

        result.add('function');

        if (this.nameSN !== null) {
            result.add([ ' ', this.nameSN ]);
        }
    },

    /**
     * called to generate the part before the body
     *
     * @param SourceNode result
     */
    preBody: func(SourceNode result) {

        // nothing to do here
    },

    /**
     * called to generate the part after the body
     *
     * @param SourceNode result
     */
    postBody: func(SourceNode result) {

        result.add(this.nl(-1, result) + '}');
    },

    /**
     * causes function node to store this-context
     *
     * @return string js reference name to context
     */
    storeContext: func() {

        this.provideContext = true;
        return '___ths' + this.thisId;
    },

    /**
     * causes function node to add parent lookup
     *
     * @return string js reference name to parent
     */
    getParentLookup: func() {

        this.provideParent = true;
        return '___p';
    },

    /**
     * causes function node to add self lookup
     *
     * @return string js reference name to self
     */
    getSelfLookup: func() {

        this.provideSelf = true;
        return '___s';
    },

    /**
     * adds dynamic parent lookup code to given source-node
     *
     * @param SourceNode result
     * @param string lookupName name of function to look up
     * @param string ownName name of function containing the lookup
     */
    getParentLookupCode: func(SourceNode result, string lookupName, string ownName = lookupName) {

        if (lookupName === '') {
            throw new ASTException('Unable to determine function name required by parent/self lookup', this);
        }

        // check if in a prototype, don't skip it if we are

        result.add('var ___p, ___s, ___c, ___c0 = ___c = ___s = (this === this.constructor.prototype ? this : Object.getPrototypeOf(this));' + this.nl());

        // find self in proto-chain

        result.add('while (___c !== null && (___c.' + lookupName + ' !== ' + ownName + ' || ___c.hasOwnProperty(\'' + lookupName + '\') === false)) {' + this.nl(1));
        result.add('___s = ___c,' + this.nl());
        result.add('___c = Object.getPrototypeOf(___c);' + this.nl(-1));
        result.add('}' + this.nl());

        // get self and parent prototype

        result.add('___s = ___s.constructor,' + this.nl());
        result.add('___p = (___c !== null ? Object.getPrototypeOf(___c).constructor : ___c0);' + this.nl());
    },

    /**
     * set local function name and return SourceNode of it
     *
     * @return SourceNode?
     */
    setLocalName: func() {

        var name = this.findName();

        if (name !== null && name.valid) {
            var mangledName = this.addLocal(name.getPlain(), false, true);
            this.nameSN = name.makeSourceNode(name.getPlain());
            this.mangledNameSN = name.makeSourceNode(mangledName);
        }

        // check if name needs to be registered with parent scope

        if (this.registerWithParent) {
            if (this.nameSN === null) {
                throw new ASTException('Unable to determine function name in func statement', this);
            } else {
                this.parent.findScope().addLocal(name.getPlain(), false);
            }
        }
    },
};