/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var FunctionNode = require('./base/function_node');
var SourceNode = require('../../source_node');
var Scope = require('./scope');

var thisId = 1;

module FunctionLiteral = proto (FunctionNode) {

    thisId              : 0,
    name                : '',
    provideContext      : false,
    registerWithParent  : false,
    specialArgs         : null,

    constructor: func(string key, string value) {

        this.specialArgs = [ ];
        Scope->constructor(key, value);
        this.thisId = thisId++;
    },

    storeContext: func() {

        this.provideContext = true;
        return '___ths' + this.thisId;
    },

    begin: func() {
        return this.csn('function');
    },

    addLocalName: func(SourceNode result, SourceNode nameSN) {

        this.addImplicit(nameSN.toString(), true);
        result.add([ ' ', this.name ]);
    },

    preBody: func(SourceNode result) {

        // nothing to do here
    },

    postBody: func(SourceNode result, SourceNode body) {

        result.add(this.nl(0, result));
        result.add(body);
    },

    toSourceNode: func() {

        // indent child content, compensate by not indenting at opening {

        this.nl(1);

        // construct result string

        var result = this.begin();

        // name anonymous functions within their scope,

        var nameSN = this.findName();

        if (nameSN !== null && nameSN.toString().match(/^([\'\"]).*\1$/) === null) {
            this.name = nameSN.toString();
            this.addLocalName(result, nameSN);
        } else {
            this.name = null;
        }

        // check if name needs to be registered with parent scope

        if (this.registerWithParent) {
            this.parent.findScope().addImplicit(this.name);
        }

        // handle parameters

        result.add([ '(', this.get('param_list').toSourceNode(), ') {' + this.nl() ]);

        // prepare body part

        this.preBody(result);
        var body = this.get('body').toSourceNode();

        // set local variables and special parameters

        result.add(this.refsToSourceNode());

        for (var id in this.specialArgs) {
            result.add([ this.specialArgs[id], this.nl() ]);
        }

        // stored this-context

        if (this.provideContext) {
            result.add([ 'var ', this.storeContext(), ' = this;' + this.nl() ]);
        }

        // prepare parent/self lookup, if any of those keywords were used

        if (this.provideParent || this.provideSelf) {
            this.getParentLookupCode(result, this.name);
        }

        // finalize body

        this.postBody(result, body);
        result.add(this.nl(-1, result) + '}');

        return result;
    },
};