/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var FileNode = require('./base/file_node');
var ASTException = require('../../language_parser/ast_exception');

module ResourceLiteral = proto (FileNode) {

    toSourceNode: func() {

        var parser = this.parser;
        var options = parser.transform.options;
        var fileNode = this.get('file');
        var fileName = fileNode.toSourceNode().toString().slice(1, -1);

        var resolvedName = this.resolvePath(fileName, parser);

        if (resolvedName !== null) {
            parser.resultData.resources.add(resolvedName);
        } else {
            throw new ASTException('Could not find resource "' + fileName + '"', this);
        }

        var result = this.csn();
        result.add('resource(');
        result.add(fileNode.csn("'" + resolvedName + "'"));
        result.add(')');
        return result;
    },
};