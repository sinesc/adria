/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var Node = require('./base/node');
var Ident = require('./ident');

module ProtoBodyItem = proto (Node) {

    toSourceNode: func()  {

        var protoNode = this.ancestor(null, [ 'new_proto_literal', 'proto_literal', 'proto_statement' ]);
        var keyNode = this.get('key');
        var refName = (protoNode.name !== '' ? protoNode.name : 'Anonymous');

        // set constructor attributes in ProtoLiteral, do the rest ourselves

        if (keyNode.value === 'constructor') {

            protoNode.constructorSN = this.get('value').toSourceNode();
            return this.csn();

        } else {

            var valueNode = this.get('value');
            var result;

            if  (valueNode.value === 'property_literal') {

                var name = (keyNode instanceof Ident === false ? keyNode.value : '"' + keyNode.value + '"');    //!todo quotes suck

                return this.csn([ valueNode.assignmentToSourceNode(name, refName + '.prototype'), ';' + this.nl() ]);

            } else {

                var name = (keyNode instanceof Ident === false ? '[' + keyNode.value + ']' : '.' + keyNode.value);

                result = this.csn(refName + '.prototype' + name + ' = ');
                result.add(valueNode.toSourceNode());
                result.add(';' + this.nl());
                return result;
            }
        }
    }
};