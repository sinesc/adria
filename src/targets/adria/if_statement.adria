/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var Node = require('./base/node');
var Scope = require('./scope');

export IfStatement = proto (Node) {

    toSourceNode: func() {

        var result = this.csn();

        this.each(func(child) {

            if (child.key === 'else_if' || child.key === 'else') {
                result.add(' else ');
            }

            result.add(child.toSourceNode());
        });

        return result;
    },
};

export IfConditional = proto (Scope) {

    toSourceNode: func() {

        var result = this.csn();
        result.add([ 'if (', this.get('condition').toSourceNode(), ') {' + this.nl(1) ]);

        var body = this.get('body').toSourceNode();
        result.add([ this.refsToSourceNode(), body, this.nl(-1, body) + '}' ]);

        return result;
    },
};

export IfUnconditional = proto (Scope) {

    toSourceNode: func() {

        var result = this.csn();
        result.add([ '{' + this.nl(1) ]);

        var body = this.get('body').toSourceNode();
        result.add([ this.refsToSourceNode(), body, this.nl(-1, body) + '}' ]);

        return result;
    },
};