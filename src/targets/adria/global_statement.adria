/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var Node = require('./base/node');

// used as running-id to resolve name conflicts

var globalId = 1;

module GlobalStatement = proto (Node) {

    /**
     * need to handle globals during preprocess so that all modules have access to them
     */
    preprocess: func() {

        var resultData = this.parser.resultData;

        this.eachKey('item', func(Node node) {

            var nameNode = node.get('name');
            var fromNameNode = node.get('from_name');

            // don't declare imports

            if (fromNameNode.isNode()) {

                // reserve import source references, add import name to known references

                resultData.globalReservations.add(fromNameNode.value);
                resultData.globalReferences.set(nameNode.value, fromNameNode.value);

            } else {

                // normal global variable, add var-declaration code and add as known reference

                resultData.globalDeclarations.add(nameNode.value);
                resultData.globalReferences.set(nameNode.value, nameNode.value); //!todo mangling
            }
        });
    },

    toSourceNode: func() {

        var result = this.csn();
        var nl = this.nl();

        // generate code, if an assignment was made

        this.eachKey('item', func(Node node, boolean first, boolean last) {

            var nameNode = node.get('name');
            var valueNode = node.get('value');

            if (valueNode.isNode()) {
                result.add([ nameNode.value + ' = ', valueNode.toSourceNode(), ';' + (last ? '' : nl) ]);
            }
        });

        return result.children.length > 0 ? result : '';
    },
};