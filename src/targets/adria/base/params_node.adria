/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var Map = require('astd/map');
var Node = require('./node');

/**
 * @module ParamsNode
 *
 * provides methods required by FunctionParamList and FunctionParamsOptional
 */
module ParamsNode = proto (Node) {

    /**
     * returns number of optional parameters in current test-configuration
     *
     * @return int
     */
    countActiveOptionals: func() {

        var result = 0;

        this.eachKey('opt_items', func(node) {
            if (node.optionalIsActive === true) {
                var items = 0;
                node.eachKey('item', func() {
                    items++;
                });
                result += items + node.countActiveOptionals();
            }
        });

        return result;
    },

    /**
     * returns flat array of all optionals
     *
     * @return Array
     */
    indexOptionals: func() {

        var result = [ ];

        this.eachKey('opt_items', func(node) {
            result.push(node);
            var nestedOptionals = node.indexOptionals();
            if (nestedOptionals.length > 0) {
                result.push.apply(result, nestedOptionals);
            }
        });

        return result;
    },

    /**
     * returns flat list of all parameters
     *
     * @return Array
     */
    indexParameters: func() {

        var result = [ ];

        this.each(func(node) {
            if (node.key === 'opt_items') {
                var nestedParameters = node.indexParameters();
                if (nestedParameters.length > 0) {
                    result.push.apply(result, nestedParameters);
                }
            } else {
                result.push(node);
            }
        });

        return result;
    },
};