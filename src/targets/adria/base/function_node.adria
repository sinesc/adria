
var Scope = require('../scope');

module FunctionNode = proto (Scope) {

    provideParent   : false,
    provideSelf     : false,

    /**
     * causes function node to add parent lookup
     *
     * @return string js reference name to parent
     */
    getParentLookup: func() {

        this.provideParent = true;
        return '___p';
    },

    /**
     * causes function node to add self lookup
     *
     * @return string js reference name to self
     */
    getSelfLookup: func() {

        this.provideSelf = true;
        return '___s';
    },

    /**
     * adds dynamic parent lookup code to given source-node
     *
     * @param SourceNode result
     * @param string lookupName name of function to look up
     * @param string ownName name of function containing the lookup
     */
    getParentLookupCode: func(result, lookupName, ownName = lookupName) {

        // check if in a prototype, don't skip it if we are

        result.add('var ___p, ___s, ___c, ___c0 = ___c = ___s = (this === this.constructor.prototype ? this : Object.getPrototypeOf(this));' + this.nl());

        // find self in proto-chain

        result.add('while (___c !== null && (___c.' + lookupName + ' !== ' + ownName + ' || ___c.hasOwnProperty(\'' + lookupName + '\') === false)) {' + this.nl(1));
        result.add('___s = ___c,' + this.nl());
        result.add('___c = Object.getPrototypeOf(___c);' + this.nl(-1));
        result.add('}' + this.nl());

        // get self and parent prototype

        result.add('___s = ___s.constructor,' + this.nl());
        result.add('___p = (___c !== null ? Object.getPrototypeOf(___c).constructor : ___c0);' + this.nl());
    },

    /**
     * lookup own prototype's constructor
     *
     * @param SourceNode result where to add the code
     */
     /*
    getSelfLookupCode: func(result) {

        result.add('var ___self = (this === this.constructor.prototype ? this : Object.getPrototypeOf(this)).constructor;' + this.nl());
    },
*/
};