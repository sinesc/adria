/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var Scope = require('../scope');
var SourceNode = require('../../../source_node');

module FunctionNode = proto (Scope) {

    provideParent   : false,
    provideSelf     : false,

    /**
     * causes function node to add parent lookup
     *
     * @return string js reference name to parent
     */
    getParentLookup: func() {

        this.provideParent = true;
        return '___p';
    },

    /**
     * causes function node to add self lookup
     *
     * @return string js reference name to self
     */
    getSelfLookup: func() {

        this.provideSelf = true;
        return '___s';
    },

    /**
     * adds dynamic parent lookup code to given source-node
     *
     * @param SourceNode result
     * @param string lookupName name of function to look up
     * @param string ownName name of function containing the lookup
     */
    getParentLookupCode: func(SourceNode result, string lookupName, string ownName = lookupName) {

        // check if in a prototype, don't skip it if we are

        result.add('var ___p, ___s, ___c, ___c0 = ___c = ___s = (this === this.constructor.prototype ? this : Object.getPrototypeOf(this));' + this.nl());

        // find self in proto-chain

        result.add('while (___c !== null && (___c.' + lookupName + ' !== ' + ownName + ' || ___c.hasOwnProperty(\'' + lookupName + '\') === false)) {' + this.nl(1));
        result.add('___s = ___c,' + this.nl());
        result.add('___c = Object.getPrototypeOf(___c);' + this.nl(-1));
        result.add('}' + this.nl());

        // get self and parent prototype

        result.add('___s = ___s.constructor,' + this.nl());
        result.add('___p = (___c !== null ? Object.getPrototypeOf(___c).constructor : ___c0);' + this.nl());
    },

    /**
     * lookup own prototype's constructor
     *
     * @param SourceNode result where to add the code
     */
     /*
    getSelfLookupCode: func(SourceNode result) {

        result.add('var ___self = (this === this.constructor.prototype ? this : Object.getPrototypeOf(this)).constructor;' + this.nl());
    },
*/
};