/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var Node = require('./base/node');

module ObjectLiteral = proto (Node) {

    assembleItemList: func() {

        var items = this.csn();

        this.each(func(child) {
            var item = this.csn();
            item.add(child.get('key').csn(child.get('key').value));
            item.add(': ');
            item.add(child.get('value').toSourceNode());
            items.add(item);
        });

        return items;
    },

    toSourceNode: func() {

        // indent now, so that children will be indented. correct for this by not indenting during return

        this.nl(1);

        var items = this.assembleItemList();
        var result = this.csn();

        if (items.toString().length >= 60) {

            result.add('{' + this.nl());
            result.add(items.join(',' + this.nl()));
            result.add(this.nl(-1) + '}');

        } else {

            this.nl(-1);
            result.add('{ ');
            result.add(items.join(', '));
            result.add(' }');
        }

        return result;
    }
};