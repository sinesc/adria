
var AdriaNode = require('./adria_node');
var FunctionLiteral = require('./function_literal');

module FunctionParamList = proto (AdriaNode) {

    /**
     * handle individual parameter
     *
     * @param boolean declare
     * @param FunctionLiteral functionNode
     * @param Scope scope
     * @param SourceNode result
     * @param CaptureNode node parameter
     */
    handle: func(declare, functionNode, scope, result, node) {

        if (node.key === 'item') {

            var name = node.get('name').toSourceNode();
            result.add(name);

            if (declare) {
                scope.addImplicit(name.toString(), true);
            }

            // check for default args, push those to FunctionLiteral's defaultArgs property

            var valueNode = node.get('value');

            if (valueNode.isNode()) {

                var defaultArg = this.csn([ name, ' = (', name, ' !== undefined ? ', name, ' : (', valueNode.toSourceNode(), '))' ]);
                functionNode.defaultArgs.push(defaultArg);
            }

            return true;
        }

        return false;
    },

    toSourceNode: func(declare = true) {

        var result = this.csn();
        var functionNode = this.findProto(FunctionLiteral);
        var scope = this.findScope();

        this.each(this.handle.bind(this, declare, functionNode, scope, result));

        return result.join(', ');
    },
};