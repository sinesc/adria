/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var Map = require('astd/map');
var Set = require('astd/set');
var ParamsNode = require('./base/params_node');
var FunctionLiteral = require('./function_literal');
var ASTException = require('../../language_parser/ast_exception');

module FunctionParamList = proto (ParamsNode) {

    numParams           : 0,
    optionalPermutations: null,
    optionalGroups      : null,

    toSourceNode: func(declare = true) {

        var result = this.csn();
        var functionNode = this.findProto(FunctionLiteral);
        var scope = this.findScope();

        if (this.has('opt_items')) {
            this.initOptionals();
            this.generatePermutationSwitch(functionNode);
        }

        this.each(this.handle.bind(this, declare, functionNode, scope, result));

        return result.join(', ');
    },

    /**
     * handle individual parameter
     *
     * @param boolean declare
     * @param FunctionLiteral functionNode
     * @param Scope scope
     * @param SourceNode result
     * @param CaptureNode node parameter
     */
    handle: func(declare, functionNode, scope, result, node) {

        if (node.key === 'item') {

            var name = node.get('name').toSourceNode();

            // don't add to formal parameter list when using advanced optionals, add to locals instead

            if (this.optionalPermutations === null) {
                result.add(name);
            }

            if (declare) {
                if (this.optionalPermutations === null) {
                    scope.addImplicit(name.toString(), true);
                } else {
                    scope.addLocal(name.toString());
                }
            }

            // check for default args, push those to FunctionLiteral's specialArgs property

            var valueNode = node.get('value');

            if (valueNode.isNode() && this.optionalPermutations === null) {

                var defaultArg = this.csn([ name, ' = (arguments.length > ' + this.numParams + ' ? ', name, ' : (', valueNode.toSourceNode(), '));' ]);
                functionNode.specialArgs.push(defaultArg);
            }

            // count required by rest params

            this.numParams++;
            return true;

        } else if (node.key === 'opt_items') {

            node.each(this.handle.bind(this, declare, functionNode, scope, result));

        } else if (node.key === 'rest') {

            var name = node.get('name').toSourceNode();

            if (declare) {
                scope.addImplicit(name.toString(), true);
            }

            var restArg = this.csn([ 'var ', name, ' = Array.prototype.slice.call(arguments, ' + this.numParams + ');' ]);
            functionNode.specialArgs.push(restArg);

            return true;
        }

        return false;
    },

    /**
     * iterates over all combinations of optionals and checks that no two combinations result in the same number of
     * arguments. sets optionalPermutations
     */
    initOptionals: func() {

        var optionals = this.indexOptionals();
        var permutations = this.findValidOptionalPermutations(optionals);
        var counts = new Set();

        // try all permutations, log allowed ones

        for (var permutation, numParameters in permutations.data) {

            if (counts.has(numParameters)) {
                throw new ASTException('Ambiguous parameter-list, multiple permutations result in ' + numParameters + ' optional parameters', this);
            }

            counts.add(numParameters);
        }

        this.optionalGroups = optionals;
        this.optionalPermutations = permutations.data;
    },

    /**
     * generates source code for the advanced optionals syntax
     *
     * @param FunctionLiteral functionNode
     */
    generatePermutationSwitch: func(functionNode) {

        var FunctionParamsOptional = require('./function_params_optional');
        var parameters = this.indexParameters();
        var parameterGroups = new Array(parameters.length);
        var numUngrouped = 0;
        var result = this.csn();

        // map optional-group for each parameter and count ungrouped parameters

        for (var id, parameter in parameters) {
            var optionalGroup = parameter.findProto(FunctionParamsOptional, FunctionParamList);
            if (optionalGroup instanceof FunctionParamsOptional) {
                parameterGroups[id] = optionalGroup;
            } else {
                parameterGroups[id] = null;
                numUngrouped++;
            }
        }

        // generate code

        for (var permutation, numGrouped in this.optionalPermutations) {

            result.add('if (arguments.length === ' + (numGrouped + numUngrouped) + ') {' + this.nl(1));

            var argId = 0;
            this.applyOptionalPermutation(permutation, this.optionalGroups);

            // either get parameter value from arguments or default values

            for (var id, parameter in parameters) {
                if (parameterGroups[id] === null || parameterGroups[id].optionalIsActive) {
                    result.add([ parameter.get('name').toSourceNode(), ' = arguments[' + (argId++) + '];' + this.nl() ]);
                } else {
                    result.add([ parameter.get('name').toSourceNode(), ' = ', parameter.get('value').toSourceNode(), ';' + this.nl() ]);
                }
            }

            result.add(this.nl(-1, result) + '} else ');
        }

        result.add('{' + this.nl(1) + 'throw new Exception(\'invalid number of arguments\');' + this.nl(-1) + '}') ;

        functionNode.specialArgs.push(result);
    },

    /**
     * finds valid optional combinations and returns map of bit-string => used parameters
     *
     * @return Map
     */
    findValidOptionalPermutations: func(optionals) {

        var bits = optionals.length;
        var permutations = Math.pow(2, bits);
        var patterns = new Map();

        // try all permutations, log allowed ones

        for (var permutation = 0; permutation < permutations; permutation++) {

            var pattern = '';

            // try to set bitpattern to optionals and get actual pattern allowed by nested optionals

            for (var bit = 0; bit < bits; bit++) {
                var actuallySet = optionals[bit].setOptionalActive((permutation & (1 << bit)) > 0);
                pattern += actuallySet ? '1' : '0';
            }

            // add pattern

            if (patterns.lacks(pattern)) {
                patterns.set(pattern, this.countActiveOptionals());
            }
        }

        return patterns;
    },

    /**
     * apply given permutation string to optional parameter groups
     *
     * @param string permutation as produced by findValidOptionalPermutations
     * @param Array optionals as indexed by indexOptionals
     */
    applyOptionalPermutation: func(permutation, optionals) {

        for (var id = 0; id < permutation.length; id++) {
            optionals[id].optionalIsActive = (permutation.slice(id, id + 1) === '1');
        }
    },
};