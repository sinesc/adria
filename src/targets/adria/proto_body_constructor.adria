/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis Möhlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var FunctionLiteral = require('./function_literal');
var ProtoLiteral = require('./proto_literal');
var SourceNode = require('../../source_node');

module ProtoBodyConstructor = proto (FunctionLiteral) {

    /**
     * set local function name and return SourceNode of it
     *
     * @return SourceNode?
     */
    setLocalName: func() {

        var name = this.findProto(ProtoLiteral).name;

        if (name !== null) {

            if (name.match(/^([\'\"]).*\1$/) === null) {
                this.name = name;
                this.addImplicit(name, true);
            }
        }

        return this.name === '' ? null : this.csn(name); //!todo
    },

    preParamList: func(SourceNode result, SourceNode? nameSN) {

        if (nameSN !== null) {
            result.add([ 'function ', nameSN ]);
        } else {
            result.add([ 'function Anonymous' ]);
        }
    },

    getParentLookupCode: func(SourceNode result, string lookupName, string ownName = lookupName) {
        parent->getParentLookupCode(result, 'constructor', ownName !== '' ? ownName : 'Anonymous');
    },
};