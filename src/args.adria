/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var parseArgs = require('minimist');

var identity = func(val) {
    return val;
};

module Args = proto {

    rawArgs     : null,
    definition  : { },
    paramMap    : { },

    /**
     * construct instance, parse to raw argument object
     */
    constructor: func() {
        this.rawArgs = parseArgs(process.argv.slice(2));
    },

    /**
     * add a new argument
     *
     * @param object options
     */
    add: func(object options) {

        assert(typeof options.name === 'string');
        assert(typeof options.param === 'string' || options.param instanceof Array);

        this.definition[options.name] = options;

        if (typeof options.param === 'string') {
            this.paramMap[options.param] = options.name;
        } else if (options.param instanceof Array) {
            for (var i = 0; i < options.param.length; ++i) {
                this.paramMap[options.param[i]] = options.name;
            }
        }
    },

    addSwitch: func(name, help, defaultValue) {

        this.add({
            name: name,
            param: name,
            defaultValue: defaultValue,
            help: help,
        });
    },

    /**
     * returns parsed arguments
     *
     * @param boolean nullDefaults return null as default for missing options (instead of defined defaults)
     * @return object
     */
    parse: func(nullDefaults = false) {

        var parsed = { };
        var unknown = { };

        parsed['!'] = unknown;

        for (var paramName, value in this.rawArgs) {

            if (this.paramMap[paramName] === undefined) {
                unknown[paramName] = value;
            } else if (value instanceof Array === false || value.length > 0) {
                parsed[this.paramMap[paramName]] = value;
            }
        }

        for (var name, options in this.definition) {

            var formatter = options.formatter !== undefined ? options.formatter : identity;
            assert(typeof formatter === 'function');

            if (parsed[name] === undefined && nullDefaults) {
                parsed[name] = null;
            } else {
                var value = parsed[name] !== undefined ? parsed[name] : options.defaultValue;
                parsed[name] = formatter.call(this, value !== undefined ? value : null);
            }
        }

        return parsed;
    },

    /**
     * validate parameters
     *
     * @param object optional parsed options
     */
    validate: func(object? options = null) {

        //!todo
        return true;
    },

    /**
     * returns argument default values
     *
     * @param boolean nullDefaults return null as default for missing options (instead of defined defaults)
     * @return object
     */
    getDefaults: func(nullDefaults = false) {

        var parsed = { };

        for (var name, options in this.definition) {

            var formatter = options.formatter !== undefined ? options.formatter : identity;
            assert(typeof formatter === 'function');

            parsed[name] = nullDefaults ? null : formatter.call(this, options.defaultValue !== undefined ? options.defaultValue : null);
        }

        return parsed;
    },

    /**
     * returns help message for defined parameters
     *
     * @param string processName displayed within helpmessage
     * @return string
     */
    getHelp: func(string processName) {

        var result = 'usage: ' + processName;
        var length = result.length;
        var positional = null;

        // output argument summary behind processname

        for (var name, options in this.definition) {
            var isPositional = options.param === '_' || (options.param.length === 1 && options.param[0] === '_');
            if (options.help && isPositional === false) {
                var param = formatParams(options, true, true);
                if (length + param.length > 80) {
                    result += "\n  " + param;
                    length = param.length + 2;
                } else {
                    result += ' ' + param;
                    length += param.length + 1;
                }
            } else if (isPositional) {
                positional = name;
            }
        }

        // add positional argument

        if (positional !== null && this.definition[positional].help) {
            var options = this.definition[positional];
            result += ' ' + options.helpVar + ' [' + options.helpVar + ' ...]';
            result += "\n\nPositional arguments:";
            result += "\n  " + options.helpVar.padRight(20) + options.help;
        }

        // output helplines

        result += "\n\nOptional arguments:";

        for (var name, options in this.definition) {
            if (options.help && options.param !== '_' && (options.param.length !== 1 || options.param[0] !== '_')) {
                var fullParams = formatParams(options);
                result += "\n  " + fullParams.padRight(20);
                if (fullParams.length > 18) {
                    result += "\n  " + " ".repeat(20);
                }
                result += options.help;
                result += formatDefault(options);
            }
        }

        return result;
    },
};

var formatDefault = func(options) {

    var defaultValue = options.defaultValue;
    var invertParam = options.param instanceof Array ? options.param[options.param.length -1] : options.param;
    var stringValue = null;

    if (typeof defaultValue === 'string') {
        stringValue = defaultValue;
    } else if (defaultValue instanceof Array && defaultValue.length > 0) {
        stringValue = defaultValue.join(', ');
    } else if (typeof defaultValue === 'object' && defaultValue !== null && defaultValue instanceof Array === false) {
        stringValue = '!todo';
    } else if (defaultValue === true) {
        stringValue = 'enabled, --no-' + invertParam + ' to disable';
    }

    if (stringValue !== null) {
        return ' [ ' + stringValue + ' ]';
    } else {
        return '';
    }
};

var formatParams = func(object options, first = false, brackets = false) {

    var params = typeof options.param === 'string' ? [ options.param ] : (first ? [ options.param[0] ] : options.param);
    var result = [];

    for (var i, param in params) {
        if (param !== '_') {

            var item = (param.length === 1 ? '-' : '--') + param;

            if (options.allowed) {
                item += ' {' + options.allowed.join(',') + '}';
            } else if (options.helpVar) {
                item += ' <' + options.helpVar + '>';
            }

            if (brackets) {
                result.push('[' + item + ']');
            } else {
                result.push(item);
            }
        }
    }

    return result.join(', ');
};
