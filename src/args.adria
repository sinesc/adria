/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var argparse = require('argparse');

module Args = proto {

    parser      : null,
    parsed      : null,
    callbacks   : { },

    constructor: func() {

        this.parser = new argparse.ArgumentParser({
            version : '{{version}}',
            addHelp : false,
            epilog  : 'Use --no-... to invert option switches, i.e. --no-strict',
        });
    },

    /**
     * add a new argument
     *
     * @param Array flags
     * @param object options
     * @param func? callback
     */
    add: func(Array flags, object options, func? callback = null) {

        this.parser.addArgument(flags, options);

        if (callback !== null) {

            var name = (options.dest !== undefined ? options.dest : null);

            if (name === null) {
                for (var id, flag in flags) {
                    if (flag.slice(0, 2) === '--') {
                        name = flag.slice(2);
                    }
                }
            }

            this.callbacks[name] = callback;
        }

        this.parsed = null;
    },

    /**
     * add a new on-off switch type argument
     *
     * @param string name
     * @param string help
     * @param boolean defaultState
     */
    addSwitch: func(string name, string help, boolean defaultState = false) {

        var defaultText = ' (' + (defaultState ? 'true' : 'false') + ')';

        this.parser.addArgument([ '--' + name ], { help: help + defaultText, action: 'storeTrue', dest: name });
        this.parser.addArgument([ '--no-' + name ], { help: argparse.Const.SUPPRESS, action: 'storeFalse', dest: name });

        var defaultValue = { };
        defaultValue[name] = defaultState;
        this.parser.setDefaults(defaultValue);
    },

    /**
     * returns parsed arguments, ignoring any unknown args
     *
     * @return object
     */
    parseKnown: func() {

        if (this.parsed === null) {
            this.parsed = this.parser.parseKnownArgs()[0];
            applyCallbacks.call(this);
        }

        return this.parsed;
    },

    /**
     * returns parsed arguments, terminating the application on unknown
     * arguments with helpful error message. also handles help flag.
     *
     * @return object
     */
    parseAll: func() {

        // only add help on final parse, so that all options are available for help output

        this.parser.addArgument(
            [ '-h', '--help' ],
            { action: 'help', defaultValue: argparse.Const.SUPPRESS, help: 'Show this help message and exit.' }
        );

        this.parsed = this.parser.parseArgs();
        applyCallbacks.call(this);

        return this.parsed;
    },
};

/**
 * apply user-defined callbacks to parsed results (to avoid having to deal with argparse custom actions)
 */
var applyCallbacks = func() {

    for (var key, value in this.parsed) {
        if (this.callbacks[key] !== undefined) {
            this.parsed[key] = this.callbacks[key](value);
        }
    }
};
