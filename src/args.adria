/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var argparse = require('argparse');

var parsed = null;
var callbacks = { };

var parser = new argparse.ArgumentParser({
    version : '{{version}}',
    addHelp : false,
    epilog  : 'Use --no-... to invert option switches, i.e. --no-strict',
});

/**
 * add a new argument
 *
 * @param array flags
 * @param object options
 * @param function callback
 */
export add = func(flags, options, callback = null) {

    parser.addArgument(flags, options);

    if (callback !== null) {

        var name = (options.dest !== undefined ? options.dest : null);

        if (name === null) {
            for (var id, flag in flags) {
                if (flag.slice(0, 2) === '--') {
                    name = flag.slice(2);
                }
            }
        }

        callbacks[name] = callback;
    }

    parsed = null;
};

/**
 * add a new on-off switch type argument
 *
 * @param string name
 * @param string help
 * @param boolean defaultState
 */
export addSwitch = func(name, help, defaultState = false) {

    var defaultText = ' (' + (defaultState ? 'true' : 'false') + ')';

    parser.addArgument([ '--' + name ], { help: help + defaultText, action: 'storeTrue', dest: name });
    parser.addArgument([ '--no-' + name ], { help: argparse.Const.SUPPRESS, action: 'storeFalse', dest: name });

    var defaultValue = { };
    defaultValue[name] = defaultState;
    parser.setDefaults(defaultValue);
};

/**
 * returns parsed arguments, ignoring any unknown args
 *
 * @return object
 */
export parseKnown = func() {

    if (parsed === null) {
        parsed = parser.parseKnownArgs()[0];
        applyCallbacks();
    }

    return parsed;
};

/**
 * returns parsed arguments, terminating the application on unknown
*  arguments with helpful error message. also handles help flag.
 *
 * @return object
 */
export parseAll = func() {

    // only add help on final parse, so that all options are available for help output

    parser.addArgument(
        [ '-h', '--help' ],
        { action: 'help', defaultValue: argparse.Const.SUPPRESS, help: 'Show this help message and exit.' }
    );

    parsed = parser.parseArgs();
    applyCallbacks();

    return parsed;
};

/**
 * apply userdefined callbacks to parsed results (to avoid having to deal with argparse custom actions)
 */
var applyCallbacks = func() {

    for (var key, value in parsed) {
        if (callbacks[key] !== undefined) {
            parsed[key] = callbacks[key](value);
        }
    }
};
