/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var fs = require('fs');
var util = require('../../util');
var AdriaTransform = require('../adria/transform');
var AdriaDebugParser = require('./parser');

/**
 * Transforms a set of input files into an XML string representing the file's
 * syntax tree.
 *
 * @see Transform
 */
module AdriaDebugTransform = proto(AdriaTransform) {

    constructor: func(string? stdin) {

        AdriaTransform->constructor(stdin);

        this.options['cache'] = false;
        this.options['scan'] = false;
    },

    run: func() {

        // create a prototype parser to clone from (to avoid training overhead)

        this.protoParser = new AdriaDebugParser(this);
        this.protoParser.trainSelf();
        this.reset();

        // process data from stdin and initial files

        if (this.stdin !== null) {
            this.recurseDependencies('main' + this.options['extension'], this.stdin);
        }

        var files = this.options['files'];

        for (var id in files) {
            this.recurseDependencies(util.normalizeExtension(files[id], this.options['extension']));
        }

        // generate module code

        var result = [];

        for (var id, currentModule in this.modules) {
            result.push(currentModule.parser.process());
        }

        // merge and return

        if (this.options['outFile'] !== null) {
            fs.writeFileSync(this.options['basePath'] + this.options['outFile'], result.join('\n'));
        } else {
            process.stdout.write(result.join('\n'));
        }
    },
};
