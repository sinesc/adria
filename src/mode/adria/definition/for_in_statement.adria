/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var Scope = require('./scope');

module ForInStatement = proto (Scope) {

    toSourceNode: func() {

        var keyNode = this.get('key');
        var valueNode = this.get('value');

        // declare locals, create SourceNodes for possibly mangled names

        var keySN, valueSN;
        var isVar = false;

        if (this.get('var').isNode()) {

            isVar = true;
            keySN = keyNode.csn(this.addLocal(keyNode.value));

            if (valueNode.isNode()) {
                valueSN = valueNode.csn(this.addLocal(valueNode.value));
            }

        } else {

            keySN = keyNode.toSourceNode();
            valueSN = valueNode.toSourceNode();
        }

        var source = this.get('source').toSourceNode();

        // generate indented body code

        this.nl(1);
        var body = this.get('body').toSourceNode();
        this.nl(-1);

        // generate loop code, place body inside

        var result = this.csn();
        result.add(this.refsToSourceNode());
        result.add(['for (' + (isVar ? 'let ' : ''), keySN, ' in ', source, ') {' + this.nl(1) ]);

        if (valueNode.isNode()) {
            result.add([ 'let ', valueSN, ' = ', source, '[', keySN, '];', this.nl() ]);
        }

        result.add([ body, this.nl(-1, body), '}' ]);

        return result;
    },
};