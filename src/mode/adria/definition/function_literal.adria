/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var SourceNode = require('../../../source_node');
var Scope = require('./scope');
var ASTException = require('../../../language_parser/ast_exception');
var Name = require('../name');

module FunctionLiteral = proto (Scope) {

    thisId                  : 0,
    provideContext          : false,
    provideParent           : false,
    provideSelf             : false,
    provideArgumentsLength  : false,

    /**
     * @var Name
     */
    name: null,

    /**
     * @var boolean function literals only register their names inside their own scope, statements publish the name to parent as well
     */
    registerWithParent: false,

    /**
     * @var Array extra code to be placed right below local declarations, usually handling special argument features
     */
    specialArgs: null,

    /**
     * extends Scope with special args and thisId support
     *
     * @param string key
     * @param string value
     */
    constructor: func(string key, string value) {

        this.specialArgs = [ ];
        Scope->constructor(key, value);
    },

    reset: func(object state) {
        this.specialArgs = [ ];
        parent->reset(state);
    },

    /**
     * scan for shadowed imports
     *
     * @param any state user-defined scan state object passed to every child
     */
    scan: func(object state) {

        if (this.name.valid) {
            var transform = this.parser.transform;
            var plain = this.name.getPlain();

            if (transform.globalReservations.has(plain)) {
                var importedAs = transform.globalReferences.find(plain, null);
                var message = '"$0" locally shadows external "$0"' + (importedAs != null ? ' (imported as "$1")' : '');
                application.notice(message + this.loc(), plain, importedAs);
            }
        }

        parent->scan(state);
    },

    /**
     * generate function source code
     *
     * @return SourceNode
     */
    toSourceNode: func() {

        this.thisId = this.parser.transform.makeUID();

        // indent child content, compensate by not indenting at opening {

        this.nl(1);
        var result = this.csn();

        // determine own name, generate code before parameter list

        this.setLocalName();
        this.preParamList(result);

        // handle parameters

        result.add([ '(', this.get('param_list').toSourceNode(), ') {' + this.nl() ]);

        // prepare body part

        this.preBody(result);
        var body = this.get('body').toSourceNode();

        // stored arguments length

        if (this.provideArgumentsLength) {
            result.add([ 'var ', this.jsArgumentsLength(), ' = arguments.length;' + this.nl() ]);
        }

        // set local variables and special parameters

        result.add(this.refsToSourceNode());

        for (var id in this.specialArgs) {
            result.add([ this.specialArgs[id], this.nl() ]);
        }

        // stored this-context

        if (this.provideContext) {
            result.add([ 'var ', this.storeContext(), ' = this;' + this.nl() ]);
        }

        // prepare parent/self lookup, if any of those keywords were used

        if (this.provideParent || this.provideSelf) {
            result.add(this.jsProtoLookup(this.name.valid ? this.name.getMangled() : ''));
        }

        result.add(this.nl(0, result));
        result.add(body);

        // finalize body

        this.postBody(result);

        return result;
    },

    /**
     * called to generate the part before the parameter list
     *
     * @param SourceNode result
     */
    preParamList: func(SourceNode result) {

        result.add('function');

        if (this.name.valid) {
            result.add([ ' ', this.name.getMangledNode() ]);
        }
    },

    /**
     * called to generate the part before the body
     *
     * @param SourceNode result
     */
    preBody: func(SourceNode result) {

        // nothing to do here
    },

    /**
     * called to generate the part after the body
     *
     * @param SourceNode result
     */
    postBody: func(SourceNode result) {

        result.add(this.nl(-1, result) + '}');
    },

    /**
     * causes function node to store this-context
     *
     * @return string js reference name to context
     */
    storeContext: func() {

        this.provideContext = true;
        return '___ths$' + this.thisId;
    },

    /**
     * causes function node to store arguments length
     *
     * @return string js reference name to arguments length
     */
    jsArgumentsLength: func() {

        this.provideArgumentsLength = true;
        return '___al';
    },

    /**
     * causes function node to add parent lookup
     *
     * @return string js reference name to parent
     */
    jsParent: func() {

        this.provideParent = true;
        return '___p';
    },

    /**
     * causes function node to add self lookup
     *
     * @return string js reference name to self
     */
    jsSelf: func() {

        this.provideSelf = true;
        return '___s';
    },

    /**
     * adds dynamic parent lookup code to given source-node
     *
     * @param string lookupName name of function to look up
     * @param string ownName name of function containing the lookup
     */
    jsProtoLookup: func(string lookupName, string ownName = lookupName) {

        if (lookupName == '') {
            throw new ASTException('Unable to determine function name required by parent/self lookup', this);
        }

        var result = this.csn();

        // check if in a prototype, don't skip it if we are

        var declarations = this.provideSelf ? '___p, ___s, ___c, ___c0 = ___c = ___s' : '___p, ___c, ___c0 = ___c';

        result.add('var ' + declarations + ' = (this === this.constructor.prototype ? this : Object.getPrototypeOf(this));' + this.nl());

        // find self in proto-chain

        result.add('while (___c !== null && (___c.' + lookupName + ' !== ' + ownName + ' || ___c.hasOwnProperty(\'' + lookupName + '\') === false)) {' + this.nl(1));

        if (this.provideSelf) {
            result.add('___s = ___c,' + this.nl());
        }

        result.add('___c = Object.getPrototypeOf(___c);' + this.nl(-1));
        result.add('}' + this.nl());

        // get self and parent prototype

        if (this.provideSelf) {
            result.add('___s = ___s.constructor,' + this.nl());
        }

        result.add('___p = (___c !== null ? Object.getPrototypeOf(___c).constructor : ___c0);' + this.nl());

        return result;
    },

    /**
     * set local function name
     *
     * @return SourceNode?
     */
    setLocalName: func() {

        var name = this.findName();

        // check if name needs to be registered with parent scope

        if (this.registerWithParent) {

            // register at parent level

            if (name.valid) {
                var mangledName = this.parent.findScope().addLocal(name.getPlain(), false);
                this.name = new Name(name.node, name.getPlain(), mangledName);
            } else {
                throw new ASTException('Unable to determine function name in func statement', this);
            }

        } else {

            // register in function scope

            if (name != null && name.valid) {
                var mangledName = this.addLocal(name.getPlain(), false, true);
                this.name = new Name(name.node, name.getPlain(), mangledName);
            } else {
                this.name = new Name();
            }
        }

    },
};
