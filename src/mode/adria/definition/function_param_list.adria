/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var Map = require('astd/map');
var Set = require('astd/set');
var ParamsNode = require('../params_node');
var FunctionLiteral = require('./function_literal');
var ASTException = require('../../../language_parser/ast_exception');
var Scope = require('./scope');
var SourceNode = require('../../../source_node');
var Node = require('../node');

module FunctionParamList = proto (ParamsNode) {

    numParams               : 0,
    optionalPermutations    : null,
    optionalGroups          : null,

    types: new Set([ 'boolean', 'number', 'finite', 'string', 'scalar', 'func', 'object' ]),

    reset: func(object state) {
        this.numParams = 0;
        this.optionalPermutations = null;
        this.optionalGroups = null;
        parent->reset(state);
    },

    toSourceNode: func() {

        var result = this.csn();
        var functionNode = this.findProto(FunctionLiteral);
        var scope = this.findScope();

        if (this.has('opt_items')) {
            this.initOptionals();
            this.generatePermutationSwitch(functionNode);
        }

        this.each(this.handle.bind(this, functionNode, scope, result));

        return result.join(', ');
    },

    /**
     * handle individual parameter
     *
     * @param FunctionLiteral functionNode
     * @param Scope scope
     * @param SourceNode result
     * @param CaptureNode node parameter
     */
    handle: func(FunctionLiteral functionNode, Scope scope, SourceNode result, Node node) {

        if (node.key === 'item') {

            var nameSN = node.get('name').toSourceNode();

            // add to parameter list unless using advanced optionals

            if (this.optionalPermutations === null) {
                result.add(nameSN);
            }

            // add to local scope if variables need to be declared

            var valueNode = node.get('value');
            var localName;

            if (this.optionalPermutations === null) {

                //!perf mangle basic default args and clone to avoid major performance degradation after assigning to an argument in a function that also contains "arguments.length"

                if (valueNode.isNode()) {
                    localName = scope.addLocal(nameSN.toString(), false, true, true);
                } else {
                    localName = scope.addLocal(nameSN.toString(), false, true);
                }

            } else {

                localName = scope.addLocal(nameSN.toString());
            }

            // check for basic default args, push those to FunctionLiteral's specialArgs property


            if (valueNode.isNode() && this.optionalPermutations === null) {

                var defaultArg = this.csn([ 'var ' + localName + ' = (arguments.length > ' + this.numParams + ' ? ', nameSN, ' : (', valueNode.toSourceNode(), '));' ]);
                functionNode.specialArgs.push(defaultArg);
            }

            // check expected type if assertions are enabled

            this.checkAnnotation(node, functionNode);

            // count required by rest params

            this.numParams++;
            return true;

        } else if (node.key === 'opt_items') {

            node.each(this.handle.bind(this, functionNode, scope, result));

        } else if (node.key === 'rest') {

            var name = node.get('name').toSourceNode();

            scope.addLocal(name.toString(), false, true);

            //!perf significant performance issue in chrome, instead copy arguments manually
            //var restArg = this.csn([ 'var ', name, ' = Array.prototype.slice.call(arguments, ' + this.numParams + ');' ]);

            var uid = '$' + this.parser.transform.makeUID();

            var restArg = this.csn([
                'var ', name, ', $0 = arguments.length - $1;'.format('___num' + uid, this.numParams) + this.nl(),
                'if (___num' + uid + ' > 0) {' + this.nl(1),
                    name, ' = new Array(___num' + uid + ');' + this.nl(),
                    'for (var $0 = 0; $0 < $1; ++$0) {'.format('___i' + uid, '___num' + uid) + this.nl(1),
                        name, '[$0] = arguments[$0 + $1];'.format('___i' + uid, this.numParams) + this.nl(-1),
                    '}' + this.nl(-1),
                '} else {' + this.nl(1),
                    name, ' = [];' + this.nl(-1),
                '}' + this.nl()
            ]);

            functionNode.specialArgs.push(restArg);

            return true;
        }

        return false;
    },

    /**
     * iterates over all combinations of optionals and checks that no two combinations result in the same number of
     * arguments. sets optionalPermutations
     */
    initOptionals: func() {

        var optionals = this.indexOptionals();
        var permutations = this.findValidOptionalPermutations(optionals);
        var counts = new Set();

        // try all permutations, log allowed ones

        for (var permutation, numParameters in permutations.data) {

            if (counts.has(numParameters)) {
                throw new ASTException('Ambiguous parameter-list, multiple permutations result in ' + numParameters + ' optional parameters', this);
            }

            counts.add(numParameters);
        }

        this.optionalGroups = optionals;
        this.optionalPermutations = permutations.data;
    },

    /**
     * generates type annotation check and adds it to the functionNode's specialArgs property
     *
     * @param Node node
     * @param FunctionLiteral functionNode
     */
    checkAnnotation: func(Node node, FunctionLiteral functionNode) {

        var annotationNode = node.get('annotation');

        if (annotationNode.isDummy()) {
            return;
        }

        // mark constructor reference as used

        var type = annotationNode.toString();

        if (this.types.has(type) === false) {
            this.markUsed(type);
        }

        // stop here if assertions are disabled

        if (this.parser.transform.options['assert'] === false) {
            return;
        }

        var allowNull   = node.get('annotation_mod').value === '?';
        var name        = node.get('name').toString();
        var argId       = this.numParams + 1;

        // either check instanceof or type

        if (this.types.has(type)) {
            var check = "'$0', $1, $2, 'argument $3 ($2)'".format(type, allowNull ? 'true' : 'false', name, argId);
            functionNode.specialArgs.push(this.csn([ 'assert.type(', check , ');' ]));
        } else {
            var check = "$0, $1, $2, 'argument $3 ($2)', '$0'".format(type, allowNull ? 'true' : 'false', name, argId);
            functionNode.specialArgs.push(this.csn([ 'assert.instance(', check , ');' ]));
        }
    },

    /**
     * generates source code for the advanced optionals syntax
     *
     * @param FunctionLiteral functionNode
     */
    generatePermutationSwitch: func(FunctionLiteral functionNode) {

        var FunctionParamsOptional = require('./function_params_optional');
        var parameters = this.indexParameters();
        var parameterGroups = new Array(parameters.length);
        var numUngrouped = 0;
        var result = this.csn();

        // map optional-group for each parameter and count ungrouped parameters

        for (var id, parameter in parameters) {
            var optionalGroup = parameter.findProto(FunctionParamsOptional, FunctionParamList);
            if (optionalGroup instanceof FunctionParamsOptional) {
                parameterGroups[id] = optionalGroup;
            } else {
                parameterGroups[id] = null;
                numUngrouped++;
            }
        }

        // generate code

        for (var permutation, numGrouped in this.optionalPermutations) {

            result.add('if (arguments.length === ' + (numGrouped + numUngrouped) + ') {' + this.nl(1));

            var argId = 0;
            this.applyOptionalPermutation(permutation, this.optionalGroups);

            // either get parameter value from arguments or default values

            for (var id, parameter in parameters) {
                if (parameterGroups[id] === null || parameterGroups[id].optionalIsActive) {
                    result.add([ parameter.get('name').toSourceNode(), ' = arguments[' + (argId++) + '];' + this.nl() ]);
                } else {
                    result.add([ parameter.get('name').toSourceNode(), ' = ', parameter.get('value').toSourceNode(), ';' + this.nl() ]);
                }
            }

            result.add(this.nl(-1, result) + '} else ');
        }

        result.add('{' + this.nl(1) + 'throw new Exception(\'invalid number of arguments\');' + this.nl(-1) + '}') ;

        functionNode.specialArgs.unshift(result);
    },

    /**
     * finds valid optional combinations and returns map of bit-string => used parameters
     *
     * @param Array optionals array of optional parameters as returned by indexOptionals
     * @return Map
     */
    findValidOptionalPermutations: func(Array optionals) {

        var bits = optionals.length;
        var permutations = Math.pow(2, bits);
        var patterns = new Map();

        // try all permutations, log allowed ones

        for (var permutation = 0; permutation < permutations; permutation++) {

            var pattern = '';

            // try to set bit-pattern to optionals and get actual pattern allowed by nested optionals

            for (var bit = 0; bit < bits; bit++) {
                var actuallySet = optionals[bit].setOptionalActive((permutation & (1 << bit)) > 0);
                pattern += actuallySet ? '1' : '0';
            }

            // add pattern

            if (patterns.lacks(pattern)) {
                patterns.set(pattern, this.countActiveOptionals());
            }
        }

        return patterns;
    },

    /**
     * apply given permutation string to optional parameter groups
     *
     * @param string permutation as produced by findValidOptionalPermutations
     * @param Array optionals as indexed by indexOptionals
     */
    applyOptionalPermutation: func(string permutation, Array optionals) {

        for (var id = 0; id < permutation.length; id++) {
            optionals[id].optionalIsActive = (permutation.slice(id, id + 1) === '1');
        }
    },
};
