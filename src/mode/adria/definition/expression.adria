/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var Set = require('astd/set');
var Node = require('../node');
var Name = require('../name');

module Expression = proto (Node) {

    wrapPrefix: new Set([
        'member', 'index', 'proto',
        'call', 'pcall', 'item'
    ]),

    preprocess: func(object state) {

        Node->preprocess(state);

        // restructure async wraps

        var children = this.children;
        var id = children.length;
        var end = -1;

        while (id--) {
            if (children[id].key === 'wrap') {
                end = id;
            } else if (end > -1 && this.wrapPrefix.lacks(children[id].key)) {
                this.nest(id + 1, end);
                end = -1;
            } else if (end > -1 && end < children.length -1 && id === 0) {
                this.nest(0, end);
            }
        }
    },

    scan: func(object state) {

        Node->scan(state);

        this.eachKey('ident', func(Node child) {
            this.checkDefined(child.value);
        });
    },

    toSourceNode: func() {

        var children = this.children;
        var propertyAssignSplit = -1;
        var result = this.csn();

        for (var id, child in children) {

            if (children[+id+1] !== undefined && children[+id+1].key === 'passignment_op') {
                propertyAssignSplit = +id + 1;
                break;
            }

            switch (child.key) {
                case 'member':
                    result.add(child.csn('.' + child.children[0].value));
                    break;

                case 'index':
                    result.add(child.csn('['));
                    result.add(child.toSourceNode());
                    result.add(child.csn(']'));
                    break;

                case 'proto':
                    result.add(child.csn('.prototype.' + child.children[0].value));
                    break;

                case 'ident':
                    this.markUsed(child.value);
                case 'call':
                case 'pcall':
                case 'wrap':
                    result.add(child.csn(child.toSourceNode()));
                    break;

                case 'brace_op':
                case 'xfix_op':
                    result.add(child.csn(child.value));
                    break;

                case 'unary_op':
                    result.add(child.csn(child.value.search(/[a-z]/) > -1 ? child.value + ' ' : child.value));
                    break;

                case 'binary_op':
                case 'assignment_op':
                case 'ternary_op':
                    result.add([ ' ', child.csn(child.value), ' ' ]);
                    break;

                default:
                    result.add(child.toSourceNode());
                    break;
            }
        }

        // property assignment

        if (propertyAssignSplit > -1) {

            var target, name;
            var child = children[propertyAssignSplit - 1];

            switch (child.key) {
                case 'member':
                    target = result;
                    name = "'" + child.children[0].value + "'";
                    break;
                case 'index':
                    target = result;
                    name = child.toSourceNode();
                    break;
                case 'proto':
                    result.add('.prototype');
                    target = result;
                    name = "'" + child.children[0].value + "'";
                    break;
            }

            // handle read-only assignment

            if (children[propertyAssignSplit].value === ':=') {
                result.prepend('Object.defineProperty(');
                result.add([ ', ', name, ', {' + this.nl(1) + 'value: ' ]);
                result.add(children[propertyAssignSplit + 1].toSourceNode());
                result.add(',' + this.nl() + 'writable: false' + this.nl(-1) + '})');
            } else {
                result = children[propertyAssignSplit + 1].assignmentToSourceNode(name, target);
            }
        }

        // async wrapping

        var wrapper = this.get('wrap');

        if (wrapper.isNode()) {

            var locals = '';
            var params = wrapper.params.join(', ');

            for (var id = 0; id < wrapper.params.length; id++) {
                locals += '___' + id + ', ';
            }

            result = this.csn([
                '(function(' + locals + '___callback) {', this.nl(1),
                'return ', result, ';', this.nl(-1),
                '}).bind(this' + (wrapper.params.length > 0 ? ', ' + params : '') + ')'
            ]);
        }

        return result;
    },

    /**
     * fetches the rightmost name on the left side of an assignment
     * i.e. name of (a || b).node.name
     *
     * @return SourceNode for name or null
     */
    findAssignee: func() {

        var children = this.children;
        var found = -1;

        for (var id = 0; id < children.length; id++) {
            if (children[id].key === 'assignment_op') {
                found = id - 1;
                break;
            }
        }

        if (found !== -1) {

            var child = children[found];

            if (child.value === 'access_operation_member' || child.value === 'access_operation_proto') {
                var item = child.get('item');
                return new Name(item, item.value);
            }

            if (child.key === 'ident') {
                return new Name(child, child.value);
            }
        }

        return null;
    },
};
