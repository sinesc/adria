/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var Node = require('../node');
var ASTException = require('../../../language_parser/ast_exception');

module VarStatement = proto (Node) {

    /**
     * locate imports and reserve their reference names
     */
    preprocess: func(object state) {

        var resultData = this.parser.resultData;

        this.eachKey('item', func(Node node) {

            var fromNameNode = node.get('from_name');

            if (fromNameNode.isNode()) {
                resultData.globalReservations.add(fromNameNode.value);
            }
        });

        parent->preprocess(state);
    },

    scan: func(object state) {

        var usages = this.findScope().usages;

        this.eachKey('item', func(node) {

            var ident = node.get('name').value;

            if (usages.lacks(ident)) {
                application.notice('unused reference "$0"' + this.loc(), ident);
            }
        });

        Node->scan(state);
    },

    toSourceNode: func() {

        var scope = this.findScope();
        var result = this.csn();
        var nl = this.nl();

        this.eachKey('item', func(node, first, last) {

            var nameNode = node.get('name');
            var valueNode = node.get('value');
            var fromNameNode = node.get('from_name');

            if (fromNameNode.isNode()) {

                // local import

                if (scope.localReferences.has(nameNode.value)) {
                    throw new ASTException('Reference "' + nameNode.value + '" already defined in local scope', this);
                }

                scope.localReferences.set(nameNode.value, fromNameNode.value);

            } else {

                // local declaration

                var localName = scope.addLocal(nameNode.value, false);

                result.add([ 'let ' + nameNode.csn(localName) ]);

                if (valueNode.isNode()) {
                    result.add([ ' = ', valueNode.toSourceNode() ]);
                }

                result.add([ ';' + (last ? '' : nl) ]);
            }
        });

        return result;
    },
};