/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var Node = require('../node');
var FunctionLiteral = require('./function_literal');
var PropertyLiteral = require('./property_literal');
var ASTException = require('../../../language_parser/ast_exception');

module StorageLiteral = proto (Node) {

    preprocess: func(state) {

        if (this.children instanceof Array) {
            for (var id, child in this.children) {
                child.preprocess(state);
            }
        }

        // set useStorage flag in property

        var propertyItem = this.ancestor(null, 'property_accessor_item');

        if (propertyItem.parent instanceof PropertyLiteral) {
            propertyItem.parent.useStorage = true;
        }
    },
    
    toSourceNode: func() {

        var propertyItem = this.ancestor(null, 'property_accessor_item');
        var propertySelf = propertyItem.parent;
        var propertyFunction = propertyItem.get('value').get('function');

        if (propertySelf instanceof PropertyLiteral && propertyFunction instanceof FunctionLiteral) {
            return this.csn(propertyFunction.storeContext() + '[___storage]');
        }

        throw new ASTException('Invalid use of "storage" literal', this);
    }
};
