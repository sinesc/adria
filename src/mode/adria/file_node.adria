/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var path = require('path');
var fs = require('fs');
var Node = require('./node');

module FileNode = proto (Node) {

    /**
     * relative paths have to be prefixed with ./ or ../
     *
     * @param string filename
     * @param boolean true if path is a relative path
     */
    isRelativePath: func(string filename) {
        return filename.slice(0, 2) === './' || filename.slice(0, 3) === '../';
    },

    /**
     * make name relative to base path
     *
     * @param string filename
     * @param Parser parser
     */
    makeBaseRelative: func(string filename, object parser) {

        var absName = path.dirname(parser.file) + '/' + filename;
        return path.relative(parser.transform.options['basePath'], absName);
    },

    /**
     * resolve file-relative path or include path to full path relative to base
     *
     * @param string filename
     * @param Parser parser
     */
    resolvePath: func(string filename, object parser, scanNodePaths = false) {

        var options = parser.transform.options;
        var relname;

        if (this.isRelativePath(filename)) {

            // check project base

            relname = this.makeBaseRelative(filename, parser);

            if (fs.existsSync(options['basePath'] + relname)) {
                return path.normalize(relname);
            }

        } else {

            // try paths

            for (var id, includePath in options['paths']) {

                relname = includePath + filename;

                if (fs.existsSync(options['basePath'] + relname)) {
                    return path.normalize(relname);
                }
            }

            // try nodejs paths

            if (scanNodePaths) {
                return this.resolveNodePath(filename, parser);
            }
        }

        return null;
    },

    resolveNodePath: func(filename, object parser, extension = '.js') {

        var basePath = parser.transform.options['basePath'];
        var currentLevel = process.cwd() + '/' + basePath;

        var split, rootName = path.basename(filename, extension);

        if ((split = filename.indexOf('/')) > -1) {
            rootName = filename.slice(0, split);
        }

        do {

            var nodeModules = currentLevel + 'node_modules/';

            if (fs.existsSync(nodeModules)) {

                if (rootName + extension === filename) {

                    if (fs.existsSync(nodeModules + rootName + '/index.js')) {
                        return path.relative(basePath, nodeModules + rootName + '/index.js');
                    } else if (fs.existsSync(nodeModules + rootName + '/package.json')) {
                        var json = JSON.parse(fs.readFileSync(nodeModules + rootName + '/package.json'));
                        if (json.main) {
                            return path.relative(basePath, nodeModules + rootName + '/' + json.main);
                        }
                    }

                } else if (fs.existsSync(nodeModules + filename)) {
                    return path.relative(basePath, nodeModules + '/' + filename);
                }
            }

            if (currentLevel !== '/') {
                currentLevel = path.normalize(currentLevel + '../');
            }

        } while (currentLevel !== '/');

        return null;
    }
};