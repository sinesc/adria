/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var fs = require('fs');
var path = require('path');
var util = require('../../util');
var Set = require('astd/set');
var Map = require('astd/map');
var SourceNode = require('../../source_node');
var Template = require('../../template');
var Transform = require('../../transform');
var AdriaParser = require('./parser');
var ASTException = require('../../language_parser/ast_exception');
var Monitor = require('../../monitor');
var BaseException = require('../../base_exception');

/**
 * Transforms a set of input files into one or more output files using the
 * Adria language transformation definition
 *
 * @see Transform
 */
module AdriaTransform = proto (Transform) {

    /**
     * @var Set declarations required in application scope
     */
    globalDeclarations: null,

    /**
     * @var Set reference names that may not be overwritten by normal variable declarations anywhere within the application
     */
    globalReservations: null,

    /**
     * @var Map globally known references and their mangled names
     */
    globalReferences: null,

    /**
     * @var Set discovered but not necessarily loaded requires
     */
    requires: null,

    /**
     * @var Set loaded requires
     */
    requiresDone: null,

    /**
     * @var Set javascript required to be included
     */
    jsRequires: null,

    /**
     * @var Set known modules
     */
    modules: null,

    /**
     * @var Set required resources
     */
    resources: null,

    /**
     * @var Set builtin modules used by application
     */
    usedBuiltins: null,

    /**
     * @var string application interface name (or null for no interface, '' for unnamed interface)
     */
    interfaceName: null,

    /**
     * @var boolean true if application makes use of the application() feature
     */
    addApplication: false,

    /**
     * @var AdriaParser trained parser to use as cloning source
     */
    protoParser: null,

    /**
     * @var Map caches parsers by their module name, used when monitoring
     */
    cachedParsers: null,

    /**
     * @var string calculated from arguments, alters cache hashes to ensure cache data corresponds to current compilation options
     */
    cacheModifier: null,

    /**
     * @var integer timing reference
     */
    startTime: 0,

    /**
     * @var integer number of compiled modules
     */
    numCompiled: 0,

    /**
     * @var object builtin modules
     */
    builtins: {
        'async.adria': resource('../../../templates/adria/async.tpl'),
    },

    /**
     * constructor
     *
     * @param string? stdin
     */
    constructor: func(string? stdin) {
        Transform->constructor(stdin);
        this.cachedParsers = new Map();
    },

    /**
     * reset compilation results (for monitoring mode)
     */
    reset: func() {

        parent->reset();

        this.numCompiled        = 0;

        this.globalDeclarations = new Set();
        this.globalReservations = new Set();
        this.globalReferences   = new Map();

        this.requires           = new Set();
        this.resources          = new Set();
        this.jsRequires         = new Set();

        this.requiresDone       = new Set();
        this.usedBuiltins       = new Set();
        this.modules            = [ ];

        this.interfaceName      = null;
        this.addApplication     = false;

        this.defineImplicits();
    },

    /**
     * triggers transformation
     */
    run: func() {

        // create a prototype parser to clone from (to avoid training overhead)

        this.time();
        this.protoParser = new AdriaParser(this);
        this.protoParser.trainSelf();
        this.time('Setup $0.ms');

        // start monitoring or compile once

        if (this.options['monitor']) {
            this.startMonitoring();
        } else {
            this.compile();
        }
    },

    /**
     * runs transformation on the given input
     *
     * @param Set? forceReload in monitoring mode contains list of changed files
     * @param boolean resourceChanges
     */
    compile: func(Set? forceReload = null, boolean resourceChanges = true) {

        this.reset();

        // additional monitor mode output

        /*if (forceReload != null) {
            console.log((new Date()).format('Monitor: [%H:%M:%S] recompiling changed files...'));
            this.time();
        }*/

        // recursively preprocess data from stdin and initial files, assemble list of modules

        if (this.stdin != null) {
            this.recurseDependencies('main' + this.options['extension'], this.stdin, forceReload);
        }

        var files = this.options['files'];

        for (var id in files) {
            this.recurseDependencies(util.normalizeExtension(files[id], this.options['extension']), null, forceReload);
        }

        this.time('Load/preprocess $0.ms');

        // generate module code

        for (var id, currentModule in this.modules) {
            currentModule.result = currentModule.parser.preprocess({ });
        }
        for (var id, currentModule in this.modules) {
            currentModule.result = currentModule.parser.process();
        }

        this.time('Process $0.ms');

        // scan modules for undefined variables

        if (this.options['scan']) {
            for (var id, currentModule in this.modules) {
                currentModule.parser.prescan({ });
            }
            for (var id, currentModule in this.modules) {
                currentModule.parser.scan({ });
            }
            this.time('Scan $0.ms');
        }

        // only write if files changed

        if (this.options['monitor'] && this.numCompiled == 0 && resourceChanges == false) {
            //console.log((new Date()).format('Monitor: [%H:%M:%S] no changes. ready.'));
            return;
        }

        // finally generate and write the code

        var code = this.mergeAll();
        this.time('Merge $0.ms');

        this.output(code);
        this.time('Write $0.ms');

        // additional monitor mode output

        if (this.options['monitor']) {
            console.log((new Date()).format('Monitor: [%H:%M:%S] Compiled to ' + path.normalize(this.options['basePath'] + this.options['outFile'])));
        }
    },

    /**
     * loads given module, runs the given the parsers preprocess method on it and pulls
     * in and preprocesses any requires for that module. adds all preprocessed modules
     * to AdriaTransform::modules
     *
     * @param string moduleName name of the module
     * @param string? data module source code
     * @param Set? forceReload in monitoring mode contains the names of modified modules
     */
    recurseDependencies: func(string moduleName, string? data = null, Set? forceReload = null) {

        // get a parser for the module and run preprocess

        var parser = this.getParser(moduleName, data, forceReload);
        parser.preprocess({ });

        // add global declarations and requires to transform

        var requires = parser.resultData.requires;

        this.requiresDone.add(moduleName);

        for (var name in requires.data) {
            if (this.requiresDone.has(name) == false) {
                this.recurseDependencies(name, null, forceReload);
            }
        }

        // these are used in the template

        this.globalDeclarations = this.globalDeclarations.union(parser.resultData.globalDeclarations);
        this.globalReservations = this.globalReservations.union(parser.resultData.globalReservations);
        this.globalReferences = this.globalReferences.merge(parser.resultData.globalReferences);
        this.requires = this.requires.union(parser.resultData.requires);
        this.jsRequires = this.jsRequires.union(parser.resultData.jsRequires);
        this.resources = this.resources.union(parser.resultData.resources);

        if (parser.resultData.interfaceName != null) {

            if (this.interfaceName != null) {
                throw new ASTException('Interface already defined (' + this.interfaceName + ')', parser); //!todo where
            }
            this.interfaceName = parser.resultData.interfaceName;
        }

        // push module after all dependencies have been resolved

        this.modules.push({ parser: parser, result: null });
    },

    /**
     * prints timing information if timing is enabled
     *
     * @param string? message
     */
    time: func(string? message = null) {

        if (this.options['time'] && this.options['outFile'] != null) {

            if (message != null) {
                console.log('Timing: ' + message.format(Date.now() - this.startTime));
            }

            this.startTime = Date.now();
        }
    },

    /**
     * initialize arguments for argument parser
     */
    initOptions: func() {

        Transform->initOptions(this);

        var args = application.args;

        args.add({
            name: 'files',
            param: [ '_' ],
            defaultValue: [ ],
            help: 'File(s) to compile',
            helpVar: 'file',
        });

        args.add({
            name: 'outFile',
            param: [ 'o', 'out' ],
            help: 'Output file',
            helpVar: 'file',
        });

        args.add({
            name: 'basePath',
            param: [ 'b', 'base' ],
            defaultValue: './',
            help: 'Base path, include paths are relative to this',
            helpVar: 'path',
        });

        args.add({
            name: 'paths',
            param: [ 'p', 'path' ],
            defaultValue: [ ],
            help: 'Additional path to look for includes',
            helpVar: 'path',
        });

        args.add({
            name: 'extension',
            param: [ 'extension' ],
            defaultValue: 'adria',
            help: 'Adria file extension',
            helpVar: 'extension',
            formatter: func(data) { return '.' + data; },
        });

        args.add({
            name: 'platform',
            param: [ 't', 'target' ],
            allowed: [ 'node', 'web' ],
            defaultValue: 'node',
            help: 'Platform to generate code for',
        });

        args.add({
            name: 'headerFile',
            param: [ 'header' ],
            help: 'File to include as commentblock before output',
            helpVar: 'file',
        });

        args.add({
            name: 'defines',
            param: [ 'D', 'define' ],
            defaultValue: [ ],
            help: 'Define preprocessor value',
            helpVar: '"key=value"',
            formatter: func(data) {
                var result = { };
                for (var id, value in data) {
                    var pair = value.split('=');
                    result[pair[0]] = (pair[1] == undefined ? true : pair[1]); //!todo join all remaining (value might have contained =)
                }
                return result;
            }
        });

        args.addSwitch('shellwrap', 'Wrap in shell-script and flag executable', false);

        args.add({
            name: 'shellargs',
            param: [ 'shellargs' ],
            help: 'Arguments for shellwrap to pass to runtime',
            helpVar: '"arguments"',
        });

        args.addSwitch('monitor', 'Don\'t exit after compilation, watch for and rebuild on file changes', false);
        args.addSwitch('poll', 'Use polling instead of inotify to monitor file changes (has issues)', false);
        args.addSwitch('assert', 'Add assert() support', false);
        args.addSwitch('scan', 'Perform basic logic checks', true);
        args.addSwitch('map', 'Generate source map', false);
        args.addSwitch('link', 'Link sourcemap to output', true);
        args.addSwitch('time', 'Report compilation duration', false);
    },

    /**
     * process arguments to options property
     */
    processOptions: func() {

        parent->processOptions();

        if (this.options['files'].length < 1 || this.options['!'].length > 0) {
            console.log(application.args.getHelp());
            process.exit(1);
        }

        this.cacheModifier = util.md5(JSON.stringify(this.options));
        this.options['defines']['___uniqueId'] = util.uniqueId();
        this.options['defines']['___date'] = (new Date()).format('%y-%m-%d');
        this.options['defines']['___time'] = (new Date()).format('%H:%M:%S');
    },

    /**
     * create parser from proto-parser or reuse from cache
     *
     * @param string moduleName name of the module
     * @param string? data module source code
     * @param Set? forceReload in monitoring mode contains the names of modified modules
     */
    getParser: func(string moduleName, string? data = null, Set? forceReload = null) {

        var parser;
        var fullName = path.normalize(this.options['basePath'] + moduleName);

        if (this.cachedParsers.has(moduleName) && forceReload != null && forceReload.lacks(fullName)) {

            parser = this.cachedParsers.get(moduleName);
            parser.resetResult();
            parser.reset();

        } else {

            if (forceReload != null) {
                //console.log((new Date()).format('Monitor: [%H:%M:%S] updating ' + moduleName));
            }

            parser = this.protoParser.clone();
            parser.moduleName = moduleName;

            if (data == null) {
                parser.loadSource(fullName, this.cacheModifier);
            } else {
                parser.setSource(moduleName, data, this.cacheModifier);
            }

            this.cachedParsers.set(moduleName, parser);
            this.numCompiled++;
        }

        return parser;
    },

    /**
     * defines implicitly known references and reserved words
     */
    defineImplicits: func() {

        var transform = this;

        var addReferences = func(...refs) {
            for (var _, ref in refs) {
                transform.globalReferences.set(ref, ref);
                transform.globalReservations.add(ref);
            }
        };

        addReferences(
            'window',
            'arguments', 'this', 'true', 'false', 'null', 'undefined', 'Infinity', 'NaN',
            'Array', 'Boolean', 'Date', 'Intl', 'JSON', 'Function', 'Math', 'Number', 'Object', 'RegExp', 'String',
            'ArrayBuffer', 'DataView', 'Float32Array', 'Float64Array', 'Int16Array', 'Int32Array', 'Int8Array',
            'Uint16Array', 'Uint32Array', 'Uint8Array',
            'Error', 'EvalError', 'RangeError', 'ReferenceError', 'SyntaxError', 'TypeError', 'URIError',
            'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'eval',
            'setTimeout', 'clearTimeout', 'setInterval', 'clearInterval',
            'isFinite', 'isNaN', 'parseFloat', 'parseInt',
            'console', 'debugger',
            'application', 'Exception'
        );

        if (this.options['platform'] == 'node') {
            addReferences('process', 'Buffer');
        } else if (this.options['platform'] == 'web') {
            addReferences('screen', 'document', 'location', 'performance', 'alert', 'XMLHttpRequest', 'Worker');
        }

        if (this.options['assert']) {
            addReferences('AssertionFailedException');
        }

        // make sure javascript reserved words get mangled

        this.globalReservations.add('implements', 'interface', 'let', 'package', 'private', 'protected', 'public', 'static');

        this.globalReservations.add('function', 'class', 'enum', 'extends', 'super');
    },

    /**
     * merge modules and resources to application
     */
    mergeAll: func() {

        var options = this.options;
        var node    = new SourceNode(null, null);
        var tpl     = new Template();

        tpl.debug = this.options['debug'];
        tpl.assign('globals', this.globalDeclarations.toArray());
        tpl.assign('builtins', this.usedBuiltins.toArray());
        tpl.assign('enableAssert', options['assert']);
        tpl.assign('enableApplication', this.addApplication);
        tpl.assign('interfaceName', this.interfaceName);
        tpl.assign('platform', options['platform']);

        // wrap in shell-script

        if (options['shellwrap']) {
            node.add([
                '#!/bin/sh\n',
                '\':\' //; exec "`command -v nodejs || command -v node`" --harmony' + (options['shellargs'] == null ? '' : ' ' + options['shellargs']) + ' "$0" "$@"\n'
            ]);
        }

        // include header comment

        if (options['headerFile'] != null) {
            var header = fs.readFileSync(options['basePath'] + options['headerFile'], 'UTF-8');
            node.add('/**\n * ' + header.trim().replace(/\r?\n/g, '\n * ') + '\n */\n');
        }

        // wrap with application and merge

        var closureParams = new Map();

        if (options['platform'] == 'node') {
            closureParams.set({
                'global'    : 'window',
                'module'    : '___module',
                'require'   : '___require',
            });
        } else {
            closureParams.set('self', 'window');
            if (this.interfaceName != null) {
                closureParams.set('typeof define === "undefined" ? null : define', '___define');
                closureParams.set('typeof module !== "object" ? { ___nomodule: true } : module', '___module');
            }
        }

        node.add(';(function(' + closureParams.values().join(', ') + ') {\n"use strict";\n');

        var fw = tpl.fetch(resource('../../../templates/adria/framework.tpl'));
        node.add(new SourceNode(1, 1, 'adria-framework.js', fw))
            .setSourceContent('adria-framework.js', fw);

        // merge javascript requires

        for (var fileName in this.jsRequires.data) {
            var contents = fs.readFileSync(options['basePath'] + fileName, 'UTF-8');
            var wrapped = 'module(\'' + fileName + '\', function(module, resource) {\nvar exports = module.exports;\n' + contents + '\n});\n';
            node.add(new SourceNode(1, 1, fileName, wrapped))
                .setSourceContent(fileName, contents);
        }

        // merge modules

        for (var id, currentModule in this.modules) {
            node.add(new SourceNode(1, 1, currentModule.parser.file, currentModule.result))
                .setSourceContent(currentModule.parser.file, currentModule.parser.sourceCode);
        }

        // merge built-ins

        var usedBuiltins = this.usedBuiltins.toArray();

        for (var id, name in usedBuiltins) {
            var builtIn = tpl.fetch(this.builtins[name]);
            node.add(new SourceNode(1, 1, name.replace('.adria', '.js'), builtIn))
                .setSourceContent(name.replace('.adria', '.js'), builtIn);
        }

        // merge resources

        for (var fileName in this.resources.data) {
            var contents = fs.readFileSync(options['basePath'] + fileName, 'UTF-8');
            var wrapped = 'resource(\'' + fileName + '\', \'' + contents.jsify("'") + '\');\n';
            node.add(new SourceNode(1, 1, fileName, wrapped))
                .setSourceContent(fileName, contents);
        }

        node.trim();

        // start built-ins

        for (var id, name in usedBuiltins) {
            node.add('\nrequire(\'' + name + '\');');
        }

        // start entry module

        for (var id, file in options['files']) {
            node.add('\nrequire(\'' + util.normalizeExtension(file, this.options['extension']) + '\');');
        }

        // register interface with outside module loader

        if (this.interfaceName != null) {
            var interfaceTpl = tpl.fetch(resource('../../../templates/adria/interface.tpl'));
            node.add(new SourceNode(1, 1, 'adria-interface.js', interfaceTpl));
        }

        node.add('\n})(' + closureParams.keys().join(', ') + ');');

        return node;
    },

    /**
     * output generated code to disk or stdout
     *
     * @param SourceNode node
     */
    output: func(SourceNode node) {

        if (this.options['outFile'] != null) {

            var jsFile = this.options['basePath'] + this.options['outFile'];

            if (this.options['map']) {

                var mapFile = jsFile.stripPostfix('.js') + '.map';
                var result = node.toStringWithSourceMap({ file: path.basename(jsFile) });

                if (this.options['link']) {
                    result.code += '\n//# sourceMappingURL=' + path.basename(mapFile);
                }

                fs.writeFileSync(jsFile, result.code);
                fs.writeFileSync(mapFile, result.map);

            } else {

                fs.writeFileSync(jsFile, node.toString());
            }

            if (this.options['shellwrap']) {
                fs.chmodSync(jsFile, 493 /*0755*/);
            }

        } else {

            process.stdout.write(node.toString());
        }
    },

    /**
     * set up file monitoring
     */
    startMonitoring: func() {

        // collect monitored paths

        var paths = [ this.options['basePath'] ];

        for (var _, path in this.options['paths']) {
            paths.push(this.options['basePath'] + path);
        }

        // populate ignore list

        var ignore = [ ];

        if (this.options['outFile'] != null) {

            var jsFile = this.options['basePath'] + this.options['outFile'];
            ignore.push(jsFile);

            if (this.options['map']) {
                ignore.push(jsFile.stripPostfix('.js') + '.map');
            }
        }

        // initialize monitor

        var monitor = new Monitor(paths, ignore, 250, this.options['poll']);

        monitor.on('change', this, func(forceReload) {
            try {
                this.compile(forceReload, forceReload.intersect(this.resources).empty == false);
            } catch (BaseException e) {
                this.monitorError(e.message);
            }
        });

        // initial compile and start monitoring !todo cleanup

        try {
            this.compile();
        } catch (BaseException e) {
            this.monitorError(e.message);
        }

        monitor.start();
    },

    monitorError: func(message) {

        try {
            var jsFile = this.options['basePath'] + this.options['outFile'];
            fs.unlinkSync(jsFile);
            fs.unlinkSync(jsFile.stripPostfix('.js') + '.map');
        } catch (e) {}

        process.stderr.write('Error: ' + message + '\n');
    },
};
