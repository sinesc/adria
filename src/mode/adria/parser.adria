/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var fs = require('fs');
var Set = require('astd/set');
var Map = require('astd/map');
var LanguageParser = require('../../language_parser');
var Tokenizer = require('../../tokenizer');
var Match = require('../../tokenizer/match');
var definition = require('./definition');

/**
 * LanguageParser subclass defining additional Adria specific .sdt-file
 * entities and setting up block-name to constructor mappings.
 */
module AdriaParser = proto(LanguageParser) {

    moduleName  : '',
    indent      : 0,
    resultData  : null,

    constructor: func(object transform) {

        LanguageParser->constructor(transform);
        this.resetResult();
    },

    /**
     * returns new instance suitable for parsing
     */
    clone: func() {

        var parser = LanguageParser->clone();
        parser.resetResult();
        return parser;
    },

    /**
     * resets the parsers result-data
     */
    resetResult: func() {

        this.resultData = {
            globalDeclarations  : new Set(),
            globalReservations  : new Set(),
            globalReferences    : new Map(),
            requires            : new Set(),
            jsRequires          : new Set(),
            resources           : new Set(),
            interfaceName       : null,
        };
    },

    /**
     * pre-processes raw input string, replaces command-line defines {{DEFINE}}
     *
     * @param string data
     * @return string replaced data
     */
    preprocessRaw: func(string data) {

        data = LanguageParser->preprocessRaw(data);

        var defines = this.transform.options.defines;
        var that = this;

        return data.replace(/\{\{([_a-zA-Z][_a-zA-Z_0-9]*)\}\}/g, func(matches, key) {
            if (key.slice(0, 3) == '___') {
                that.forceNoCache = true;
            }
            return (defines[key] == undefined ? '' : defines[key]);
        });
    },

    /**
     * initialize a tokenizer, load definition files into a trainer and call parent's trainself, which
     * will use the trainer to generate the definition for this parser
     */
    trainSelf: func() {

        var keywords = new Set([
            'var', 'global',
            'if', 'else', 'for', 'in', 'do', 'while', 'switch', 'case', 'break', 'continue', 'return',
            'throw', 'try', 'catch', 'finally',
            'yield', 'await',
            'parent', 'self',
            'func', 'proto', 'mixin', 'prop', 'storage',
            'require', 'resource', 'module', 'export', 'import', 'interface',
            'delete', 'new', 'instanceof', 'typeof',
            'assert',
        ]);

        var matchKeywords = func(Match match) {

            if (keywords.has(match.data)) {
                match.name = 'KEYWORD';
            }
            return match;
        };

        this.tokenizer = new Tokenizer([
            Tokenizer.prefabs.delimited(null, '/*', '*/'),
            Tokenizer.prefabs.regex(null, /^\/\/.*/),
            Tokenizer.prefabs.breaker(),
            Tokenizer.prefabs.regex('REGEXP', /^\/(?:(?=(\\?))\1.)*?\/[a-z]*/, /^(\(|=|==|===|\+|!=|!==|,|;|&&|\|\||!|\:)$/),
            Tokenizer.prefabs.set('DELIM', [ ';', '...', '.', ',', '(', ')', '[', ']', '{', '}', '!==', '!=', '!', '++', '--', '~', '#' ]),
            Tokenizer.prefabs.group('DELIM', [ '=', '&', '|', '<', '>', ':', '?', '+', '-', '*', '/', '%' ]),
            Tokenizer.prefabs.regex('IDENT', /^[a-zA-Z_\$][a-zA-Z0-9_\$]*/, null, matchKeywords),
            Tokenizer.prefabs.regex('NUMERIC', /^0x[a-fA-F0-9]+/),
            Tokenizer.prefabs.number('NUMERIC'),
            Tokenizer.prefabs.regex('STRING', /^(["'])(?:(?=(\\?))\2[\s\S])*?\1/),
        ], [ 'KEYWORD' ]);

        application.log('AdriaParser', 'trainer processing adria .sdt-files', 2);
        this.setDefinition(resource('../../../definition/adria/control.sdt'), 'control');
        this.setDefinition(resource('../../../definition/adria/expression.sdt'), 'expression');
        this.setDefinition(resource('../../../definition/adria/literal.sdt'), 'literal');
        this.setDefinition(resource('../../../definition/adria/proto.sdt'), 'proto');
        this.setDefinition(resource('../../../definition/adria/root.sdt'), 'root');
        this.setDefinition(resource('../../../definition/adria/statement.sdt'), 'statement');

        application.log('AdriaParser', 'being trained', -2);
        LanguageParser->trainSelf();
        application.log('AdriaParser', 'done');
    },

    /**
     * called during capture-list-to-tree-conversion process to select an appropriate node-type,
     * maps blockName to subclasses of appropriate adria/base/node subclass or base itself
     *
     * @param string captureName name-part of the capture (<block>:<name>[....)
     * @param string blockName block-part of the capture (<block>:<name>[....)
     */
    mapType: func(string captureName, string blockName) {

        var typeName = blockName.snakeToCamel(true);

        if (typeof definition[typeName] == 'function') {
            return definition[typeName];
        }

        return definition.Node;
    },

    /**
     * add definition file support for ident, name and regex tag
     *
     * @param string name
     * @param string capture
     * @param string label
     * @param string condition
     * @return Parser.Definition.Node
     */
    createNode: func(string name, string capture, string label, string condition) {

        var node = LanguageParser->createNode(name, capture, label, condition);

        if (name == 'ident') {

            node.match          = '';
            node.type           = 0;
            node.tokenType      = this.tokenizer.Type.IDENT;
            node.description    = '<identifier>';

        } else if (name == 'name') {

            node.match          = '';
            node.type           = 0;
            node.tokenType      = this.tokenizer.Type.IDENT | this.tokenizer.Type.KEYWORD;
            node.description    = '<name>';

        } else if (name == 'regexp') {

            node.match          = '';
            node.type           = 0;
            node.tokenType      = this.tokenizer.Type.REGEXP;
            node.description    = '<regular expression>';
        }

        return node;
    },

    /**
     * change loadSourceFromCache behaviour to also load the original source,
     * if source-mapping is enabled
     *
     * @see LanguageParser::loadSourceFromCache
     */
    loadSourceFromCache: func(string filename, string? cacheModifier = null) {

        LanguageParser->loadSourceFromCache(filename, cacheModifier);

        if (this.cacheData != null && this.transform.options['map']) {
            this.sourceCode = fs.readFileSync(filename, 'UTF-8').replace('\r\n', '\n');
        }
    },
};
