/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var Map = require('astd/map');
var LanguageParser = require('../../language_parser');
var ASTException = LanguageParser.ASTException;
var CaptureNode = LanguageParser.CaptureNode;
var Name = require('./name');

module Node = proto (CaptureNode) {

    /**
     * @var function constructor-type findScope will search for (should be set to Scope)
     */
    Scope: null,

    /**
     * @var Map references this node would have marked as used, had the definition already been processed
     */
    toBeMarkedAsUsed: null,

    /**
     * run just before scan, marks references that were used before their declaration was parsed (possible due to var hoisting)
     *
     * @param object state
     */
    prescan: func(object state) {

        if (this.toBeMarkedAsUsed !== null) {

            for (var name, fromParent in this.toBeMarkedAsUsed.data) {
                this.markUsed(name, fromParent);
            }
        }

        CaptureNode->prescan(state);
    },

    /**
     * increases usage count for give name in it's origin scope, effectively marking it as "used"
     *
     * @param string name reference name
     * @param boolean fromParent skip current node in search
     * @return boolean success
     */
    markUsed: func(string name, fromParent = false) {

        var refScope = this.findRefScope(name, fromParent);

        if (refScope !== null) {

            refScope.usages.inc(name);
            return true;

        } else {

            if (this.toBeMarkedAsUsed === null) {
                this.toBeMarkedAsUsed = new Map();
            }

            if (this.toBeMarkedAsUsed.lacks(name)) {
                this.toBeMarkedAsUsed.set(name, fromParent);
            }

            return false;
        }
    },

    /**
     * find this node's scope
     *
     * @param boolean fromParent default false, if true start looking at parent instead of this
     * @return scope node/null
     */
    findScope: func(boolean fromParent = false) {
        return this.findProto(Node::Scope, null, fromParent, null);
    },

    /**
     * finds (parent-)scope defining given name
     *
     * @param string name
     * @param boolean fromParent skip current node in search
     * @return Scope/null
     */
    findRefScope: func(string name, fromParent = false) {

        var current = this.findScope(fromParent);

        do {
            if (current.getOwnRef(name) !== null) {
                return current;
            }
        } while ((current = current.findScope(true)) !== null);

        return current;
    },

    /**
     * returns true if the name is defined in current scope or above,
     * false if the name is implicitly known or throws if the name is
     * not known
     *
     * @param string name
     * @return boolean
     */
    checkDefined: func(string name) {

        var transform = this.parser.transform;

        if (transform.globalReferences.has(name)) {
            return false;
        }

        if (this.findScope().getRef(name) !== null) {
            return true;
        }

        throw new ASTException('Undefined reference "' + name + '"', this);
    },

    /**
     * find name on left side of assignment or proto body item
     *
     * @return Name or null
     */
    findName: func() {

        var result = null;
        var nameNode = this.get('name');

        if (nameNode.isNode() === false) {

            nameNode = this.ancestor(null, ['module_statement', 'export_statement', 'expression', 'dec_def', 'dec_def_import', 'proto_body_item']);

            if (nameNode.isNode()) {

                // fetch from declaration, proto-literal item's left side or expression

                if (nameNode.value === 'dec_def' || nameNode.value === 'dec_def_import' || nameNode.value === 'module_statement' || nameNode.value === 'export_statement') {

                    var item = nameNode.get('name');
                    return new Name(item, item.value);

                } else if (nameNode.value === 'proto_body_item') {

                    var item = nameNode.get('key');
                    return new Name(item, item.value);

                } else if (nameNode.value === 'expression') {

                    return nameNode.findAssignee();
                }
            }

        } else {

            return new Name(nameNode, nameNode.value);
        }

        return result;
    },

    /**
     * toString implementation
     *
     * @return node string representation
     */
    toString: func() {
        return this.toSourceNode().toString();
    },

    /**
     * returns sourcenode containing js-code to copy arguments to given variable
     *
     * @param mixed targetName
     * @param finite numSkip optionally skip first numSkip arguments during copy
     */
    jsCopyArguments: func(targetName, finite numSkip = 0) {

        var uid = '$' + this.parser.transform.makeUID();

        if (numSkip > 0) {

            return this.csn([
                'var ', targetName, ', $0 = arguments.length - $1;'.format('___num' + uid, numSkip) + this.nl(),
                'if (___num' + uid + ' > 0) {' + this.nl(1),
                targetName, ' = new Array(___num' + uid + ');' + this.nl(),
                    'for (var $0 = 0; $0 < $1; ++$0) {'.format('___i' + uid, '___num' + uid) + this.nl(1),
                    targetName, '[$0] = arguments[$0 + $1];'.format('___i' + uid, numSkip) + this.nl(-1),
                    '}' + this.nl(-1),
                '} else {' + this.nl(1),
                targetName, ' = [];' + this.nl(-1),
                '}' + this.nl()
            ]);

        } else {

            return this.csn([
                'var ___num' + uid + ' = arguments.length, ', targetName, ' = new Array(___num' + uid + ');' + this.nl(),
                'for (var $0 = 0; $0 < $1; ++$0) {'.format('___i' + uid, '___num' + uid) + this.nl(1),
                    targetName, '[$0] = arguments[$0];'.format('___i' + uid) + this.nl(-1),
                '}' + this.nl(),
            ]);
        }
    }
};
