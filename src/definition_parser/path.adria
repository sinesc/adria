/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * a single path connecting two nodes within a block in a parser definition file
 * note: LanguageParser::createNode and integrateNodePair are called to convert lists
 * of pairs into connected groups of node trees represented by Parser.Definition
 */
module Path = proto {

    source: null,
    target: null,

    constructor: func(PathElement source = new PathElement(), PathElement target = new PathElement()) {

        this.source = source;
        this.target = target;
    },

    reset: func() {

        this.source = this.target;
        this.target = new PathElement();
    },

    clone: func() {

        return new Path(
            this.source.clone(),
            this.target.clone()
        );
    },

};

var PathElement = proto (null) {

    name        : '',
    capture     : '',
    label       : '',
    condition   : '',

    constructor: func(string name = '', string capture = '', string label = '', string condition = '') {
        this.name = name;
        this.capture = capture;
        this.label = label;
        this.condition = condition;
    },

    clone: func() {
        return new PathElement(this.name, this.capture, this.label, this.condition);
    },
};
