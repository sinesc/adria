/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
require('./prototype');
var util = require('./util');

var AdriaTransform = require('./targets/adria_transform');
var AdriaDebugTransform = require('./targets/adriadebug_transform');

// process base command line

var target  = 'adria';
var piped = false;
var debug = false;

util.processOptions(null, {
    'target': function(type) {
        target = type;
    },
    '_switch': function(param) {
        if (param === 'pipe') {
            piped = true;
        } else if (param === 'debug') {
            debug = true;
        }
    }
});

// transformation performer

var handle = function(pipeData) {

    var transform;

    if (target === 'adria') {
        transform = new AdriaTransform(pipeData);
    } else if (target === 'adriadebug') {
        transform = new AdriaDebugTransform(pipeData);
    } else {
        throw new Error('Unsupported target "' + target+ '".');
    }

    transform.run();
};

var run = function(pipeData) {

    if (debug) {

        // put a break here. "break on any exception" can be enabled after this statement.
        // enabling "break on any exception" earlier will introduce you to node exception hell

        debugger;
        handle(pipeData);

    } else {

        try {
            handle(pipeData);
        } catch (e) {
            console.log(e.message);
            process.exit(1);
        }
    }
};

// process stdin or run directly

if (piped) {

    var pipeData = '';

    process.stdin.on('data', function(data) {
        pipeData += data.toString();
    });

    process.stdin.on('end', function() {
        run(pipeData);
    });

    process.stdin.resume();

} else {

    run();
}