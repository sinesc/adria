/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
require('astd/prototype/string').extend();
require('astd/prototype/regexp').extend();
require('astd/prototype/object').extend();

var util = require('./util');
var args = require('./args');
var AdriaTransform = require('./targets/adria_transform');
var AdriaDebugTransform = require('./targets/adriadebug_transform');

// process base command line

args.add(
    [ '-m', '--mode' ],
    { help: 'Translation mode (adria)', defaultValue: 'adria', choices: [ 'adria', 'adriadebug' ], required: false }
);

args.add(
    [ '--stdin' ],
    { help: 'Read from stdin (false)', action: 'storeTrue' }
);

args.add(
    [ '-d', '--debug' ],
    { help: 'Enable debug mode (false)', action: 'storeTrue' }
);

var options = args.partial();

// transformation performer

var handle = func(pipeData) {

    var transform;

    if (options['mode'] === 'adria') {
        transform = new AdriaTransform(pipeData);
    } else if (options['mode'] === 'adriadebug') {
        transform = new AdriaDebugTransform(pipeData);
    } else {
        throw new Error('Unsupported mode "' + options['mode']+ '".');
    }

    transform.run();
};

var run = func(pipeData) {

    if (options['debug']) {

        // put a break here. "break on any exception" can be enabled after this statement.
        // enabling "break on any exception" earlier will introduce you to node exception hell

        debugger;
        handle(pipeData);

    } else {

        try {
            handle(pipeData);
        } catch (e) {
            console.log(e.message);
            process.exit(1);
        }
    }
};

// process stdin or run directly

if (options['stdin']) {

    var pipeData = '';

    process.stdin.on('data', func(data) {
        pipeData += data.toString();
    });

    process.stdin.on('end', func() {
        run(pipeData);
    });

    process.stdin.resume();

} else {

    run();
}