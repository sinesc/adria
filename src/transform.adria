/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var util = require('./util');
var args = require('./args');
var Cache = require('./cache');

/**
 * Base for language transformation file handling. Transforms a set of input
 * files into one or more output files using given options.
 *
 * @param String piped piped data, if any
 */
module Transform = proto {

    /**
     * set command line options
     */
    options: null,

    /**
     * data received via stdin
     */
    piped: null,

    /**
     * output cache
     */
    cache: null,

    /**
     * constructor
     *
     * @param piped data received via stdin
     */
    constructor: func(piped) {

        this.piped = piped;

        this.initOptions();
        this.processOptions();

        if (this.options['cache']) {
            this.cache = new Cache();
        }

        if (this.options['debug']) {
            util.log.enable();
        }
    },

    /**
     * initialize options definition, extend with own options
     */
    initOptions: func() {

        args.addSwitch('cache', 'Cache generated code', true);
    },

    /**
     * processes options definition into options
     */
    processOptions: func() {

        this.options = args.parseAll();
    },

    /**
     * entry point, run transformation
     */
    run: func() { },
};
