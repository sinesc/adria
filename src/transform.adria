/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var fs = require('fs');
var Cache = require('./cache');
var util = require('./util');
var Set = require('astd/set');
var Map = require('astd/map');

/**
 * Base for language transformation file handling. Transforms a set of input
 * files into one or more output files using given options.
 */
module Transform = proto {

    /**
     * @var Array command line options
     */
    options: null,

    /**
     * @var string? data received via stdin
     */
    stdin: null,

    /**
     * @var Cache output cache
     */
    cache: null,

    /**
     * @var integer short unique id
     */
    uid: 1,

    /**
     * constructor
     *
     * @param string data received via stdin
     */
    constructor: func(string? stdin = null) {

        this.stdin = stdin;

        this.initOptions();
        this.processOptions();

        if (this.options['cache']) {
            this.cache = new Cache();
        }
    },

    /**
     * reset transform object
     */
    reset: func() {
        this.uid = 1;
    },

    /**
     * initialize options definition, extend with own options
     */
    initOptions: func() {

        application.args.add({
            name: 'cache',
            param: [ 'cache' ],
            defaultValue: true,
            help: 'Cache generated code',
        });

        application.args.add({
            name: 'help',
            param: [ 'h', 'help' ],
            defaultValue: false,
            help: 'Show this help message',
        });

        application.args.add({
            name: 'readConfig',
            param: [ 'c', 'config' ],
            help: 'Use build configuration',
            helpVar: 'file',
            formatter: func(value) { return value === true ? 'build.abc' : (value === null ? null : util.normalizeExtension(value, '.abc')); },
        });

        application.args.add({
            name: 'writeConfig',
            param: [ 'write-config' ],
            help: 'Write build configuration',
            helpVar: 'file',
            formatter: func(value) { return value === true ? 'build.abc' : (value === null ? null : util.normalizeExtension(value, '.abc')); },
        });
    },

    /**
     * merges options from depend with those from base. merges contained objects arrays (unique)
     *
     * @param object base
     * @param object depend
     * @return object
     */
    mergeOptions: func(object base, object depend) {

        var result = { };

        // copy values from depend

        for (var key, value in depend) {
            result[key] = value;
        }

        // overwrite/merge with current values

        for (var key, value in base) {

            if (result[key] === undefined) {

                result[key] = value;

            } if (result[key] instanceof Array && value instanceof Array) {

                result[key] = (new Set(depend[key])).add(value).toArray();

            } else if (typeof result[key] === 'object' && value !== null && typeof value === 'object') {

                result[key] = (new Map(depend[key])).set(value).data;

            } else if (value !== null) {

                result[key] = value;
            }
        }

        return result;
    },

    /**
     * recursively read option file and its dependencies
     *
     * @param string file
     * @return object
     */
    readOptions: func(string file) {

        var options = JSON.parse(fs.readFileSync(file));

        if (typeof options['depend'] === 'string') {
            options = this.mergeOptions(options, this.readOptions(options['depend']));
        }

        return options;
    },

    /**
     * write given options to given file. removes read/write/depend options and null-values
     *
     * @param string file
     * @param object options
     */
    writeOptions: func(string file, object options) {

        var saveOptions = { };

        for (var key, value in options) {

            if (key !== 'writeConfig' && key !== 'readConfig' && key !== 'depend' && value !== null) {
                saveOptions[key] = value;
            }
        }

        fs.writeFileSync(file, JSON.stringify(saveOptions, null, '\t'));
    },

    /**
     * either load or save options from file or processes given command-line arguments
     */
    processOptions: func() {

        var options = application.args.parse(true);

        if (options['readConfig'] !== null) {
            options = this.mergeOptions(options, this.readOptions(options['readConfig']));
        }

        if (options['help']) {
            console.log(application.args.getHelp('adria'));
            process.exit(0);
        }

        if (options['writeConfig'] !== null) {
            this.writeOptions(options['writeConfig'], options);
        }

        this.options = this.mergeOptions(options, application.args.getDefaults());
    },

    /**
     * returns continuously increasing unique id (base 36)
     *
     * @return string
     */
    makeUID: func() {
        return (this.uid++).toString(36);
    },

    /**
     * entry point, run transformation
     */
    run: func() { },
};
