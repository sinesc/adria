/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis Möhlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var Args = require('./args');
var BaseException = require('./base_exception');
var log = require('./log');

module Application = proto {

    args: null,
    log: null,

    /**
     * constructor, sets up some global command line options
     */
    constructor: func() {

        this.log = log;
        this.args = new Args();

        this.args.add({
            name: 'mode',
            param: [ 'm', 'mode' ],
            allowed: [ 'adria', 'adriadebug' ],
            defaultValue: 'adria',
            help: 'Translation mode',
        });

        this.args.addSwitch('stdin', 'Read from stdin', false);
        this.args.addSwitch('debug', 'Enable debug mode', false);
    },

    /**
     * runs application with given command line options
     */
    run: func#() {

        var options = this.args.parse();

        // break here on debug mode to make it easier to skip over all those nodejs-init-exceptions and start logging

        if (options['debug']) {
            debugger;
            this.log.enable();
        }

        // optionally read from standard input

        var stdin = null;

        if (options['stdin']) {
            stdin = await this.readStdIn(#);
        }

        // do not catch exceptions in debug mode

        if (options['debug']) {

            this.handle(options['mode'], stdin);

        } else {

            try {
                this.handle(options['mode'], stdin);
            } catch (BaseException e) {
                this.error(e.message);
            }
        }
    },

    /**
     * runs transformation process for given mode and input
     *
     * @param string mode currently supported: adria, adriadebug
     * @param func callback(null, data)
     */
    handle: func(string mode, string? stdin) {

        var transform;

        if (mode === 'adria') {

            var AdriaTransform = require('./mode/adria/transform');
            transform = new AdriaTransform(stdin);

        } else if (mode === 'adriadebug') {

            var AdriaDebugTransform = require('./mode/adriadebug/transform');
            transform = new AdriaDebugTransform(stdin);

        } else {

            this.error('Unsupported mode "' + mode + '".');
        }

        transform.run();
    },

    /**
     * read from stdin and call callback with data when done
     *
     * @param func callback(null, data)
     */
    readStdIn: func(func callback) {

        var data = '';

        process.stdin.on('data', func(chunk) {
            data += chunk.toString();
        });

        process.stdin.on('end', func() {
            callback(null, data);
        });

        process.stdin.resume();
    },

    /**
     * write error-message to stderr and exit
     *
     * @param string message
     * @param finite exitCode
     */
    error: func(message, exitCode = 1) {

        process.stderr.write('Error: ' + message + '\n');
        process.exit(exitCode);
    },

    /**
     * write notice to stderr
     *
     * @param string message
     */
    notice: func(message, ...vars) {

        process.stderr.write('Notice: ' + message.format(vars) + '\n');
    },
};
