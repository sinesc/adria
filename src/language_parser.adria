/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var fs = require('fs');
var Parser = require('./parser');
var DefinitionParser = require('./definition_parser');
var Transform = require('./transform');

export CaptureNode = require('./language_parser/capture_node');
export ASTException = require('./language_parser/ast_exception');

/**
 * Parser subclass with the capability to use a secondary DefinitionParser to train itself from .sdt-files. Defines
 * definition field entities entry, return, string, numeric as well as literal match (i.e. "matchme") and definition jumps
 * (by using the name of a definition as match component)
 * Also provides CaptureNode base-class to convert parser captures into an object tree of user-defined node-types.
 */
module LanguageParser = proto(Parser) {

    /**
     * @var DefinitionParser trainer secondary parser that will be used to train this one
     */
    trainer: null,

    /**
     * @var String input file
     */
    sourceCode: null,

    /**
     * @var CaptureNode captureTree contains capture result tree after file parsing
     */
    captureTree: null,

    /**
     * @var Object extra data accumulated during parsing
     */
    resultData: null,

    /**
     * @var Object cache file meta-data
     */
    cacheData: null,

    /**
     * @var string uniquely identifies different versions of same file (i.e. different compilation options)
     */
    cacheModifier: null,

    /**
     * @var boolean forcibly disable writing to cache for this parser
     */
    forceNoCache: false,

    /**
     * @var Object the parent transform object
     */
    transform: null,

    /**
     * @var String method used for processing (output generation)
     */
    processMethod: 'toSourceNode',

    /**
     * construct new instance
     *
     * @param Transform transform the application's transform object
     */
    constructor: func(Transform transform) {

        Parser->constructor(transform);

        this.transform = transform;
        this.includeTrace = transform.options['debug'];
        this.resultData = { };
    },

    /**
     * returns a clone of this object
     *
     * @return object
     */
    clone: func() {

        var parser = parent->clone();
        parser.trainer = this.trainer;
        parser.sourceCode = this.sourceCode;
        parser.captureTree = this.captureTree;
        parser.resultData = this.resultData;
        parser.cacheData = this.cacheData;
        parser.cacheModifier = this.cacheModifier;
        parser.forceNoCache = this.forceNoCache;
        parser.transform = this.transform;
        parser.processMethod = this.processMethod;
        parser.includeTrace = this.includeTrace;
        return parser;
    },

    /**
     * reset definition, then train this parser with currently loaded .sdt-file definitions
     * this is done using the integrate_node_pair() and createNode() methods
     */
    trainSelf: func() {

        assert(this.trainer != null);

        this.definition = new Parser.Definition();
        this.trainer.trainOther(this);
        this.trainer = null;
    },

    /**
     * set definition from string
     *
     * @param string data definition string
     * @param string filename name (display purpose only)
     */
    setDefinition: func(string data, string filename) {

        application.log('LanguageParser', 'setting definition file ' + filename);

        // feed file contents to secondary parser

        if (this.trainer == null) {
            this.trainer = new DefinitionParser();
        }

        application.log('LanguageParser', 'processing definition', 2);
        this.trainer.file = filename;
        this.trainer.parse(data);
        application.log('LanguageParser', 'done', -2);
    },

    /**
     * load definition
     *
     * @param string filename name
     */
    loadDefinition: func(string filename) {

        application.log('LanguageParser', 'loading definition file ' + filename);

        var fileContents = fs.readFileSync(filename, 'UTF-8');

        this.setDefinition(fileContents, filename);
    },

    /**
     * called during capture-list-to-tree-conversion process to select an appropriate node-type,
     * usually maps blockName to subclasses of CaptureNode
     *
     * @param string captureName name-part of the capture (<block>:<name>[....)
     * @param string blockName block-part of the capture (<block>:<name>[....)
     */
    mapType: func(string captureName, string blockName) {
        return CaptureNode;
    },

    /**
     * map a path node ("name:capture[label]?condition") to a new parser node. used by secondary DefinitionParser
     *
     * @param string name path node name part
     * @param string capture capture part
     * @param string label label part
     * @param string condition condition part
     * @return Parser.Definition.Node new definition node
     */
    createNode: func(string name, string capture, string label, string condition) {

        var Node = Parser.Definition.Node;
        var node = new Node();

        node.name       = name;
        node.capture    = capture;
        node.label      = label;
        node.condition  = condition;

        switch (name) {
            case 'entry':
            case 'return':
                node.match          = '';
                node.tokenType      = -1;
                node.type           = (name == 'entry' ? Node.Type.BLOCK : Node.Type.RETURN);
                node.description    = '<Please file a bug-report if you ever see this message (' + name + ')>';
                break;

            case 'string':
                node.match          = '';
                node.tokenType      = this.tokenizer.Type.STRING;
                node.type           = Node.Type.NONE;
                node.description    = '<string literal>';
                break;

            case 'numeric':
                node.match          = '';
                node.tokenType      = this.tokenizer.Type.NUMERIC;
                node.type           = Node.Type.NONE;
                node.description    = '<numeric literal>';
                break;

            default:
                var numChars = name.length;

                if (name[0] == '\"') {

                    // string match

                    assert(numChars >= 3);

                    node.match          = new RegExp('^' + RegExp.escape(name.slice(1, numChars -1)) + '$');
                    node.tokenType      = -1;
                    node.type           = Node.Type.NONE;
                    node.description    = name.slice(1, numChars -1);

                } else if (name[0] == '\'') {

                    // regexp match

                    assert(numChars >= 3);

                    node.match          = new RegExp(name.slice(1, numChars -1));
                    node.tokenType      = -1;
                    node.type           = Node.Type.NONE;
                    node.description    = name.slice(1, numChars -1);

                } else {

                    // definition jump

                    node.match          = name;
                    node.tokenType      = -1;
                    node.type           = Node.Type.JUMP;
                    node.description    = 'definition jump';
                }

                break;
        }

        return node;
    },

    /**
     * integrate a pair of two nodes into the definition. used by secondary DefinitionParser
     *
     * @param Array pair
     * @param string blockName
     */
    integrateNodePair: func(Array pair, string blockName) {

        // connect both nodes of the pair (add return type nodes to the tail(!), others to the head)

        pair[0].add(pair[1], Parser.Definition.Node.Type.RETURN & pair[1].type);

        // append entry-node to definition (once only as it is already fully connected)

        if (pair[0].type == Parser.Definition.Node.Type.BLOCK && this.definition.haveBlock(blockName) == false) {

            this.definition.createBlock(pair[0], blockName);
        }
    },

    /**
     * set source data and process it to a CaptureNode tree
     *
     * @param string filename name (for display)
     * @param string data contents
     * @param string? optional cache modifier to identify different versions of the same file (i.e. different compilation flags)
     */
    setSource: func(string filename, string data, string? cacheModifier = null) {

        var that = this;

        // load source file

        this.cacheModifier = cacheModifier;
        this.captureTree = null;
        this.file = filename;
        this.sourceCode = this.preprocessRaw(data);

        // parse file contents

        application.log('LanguageParser', 'processing source ' + filename, 2);
        var captures = this.parse(this.sourceCode);
        application.log('LanguageParser', 'done', -2);


        this.captureTree = CaptureNode::fromResults(captures, this, func(captureName, blockName) {
            return that.mapType(captureName, blockName);
        });
    },

    /**
     * try to load source-file from cache
     *
     * @param string filename
     * @param string? optional cache modifier to identify different versions of the same file (i.e. different compilation flags)
     * @return boolean true if file was retrieved from cache
     */
    loadSourceFromCache: func(string filename, string? cacheModifier = null) {

        var that = this;
        
        this.cacheModifier = cacheModifier;
        this.cacheData = this.transform.cache.fetch(filename, [ 'base'/*, 'resultData'*/ ], cacheModifier);

        if (this.cacheData !== null) {
            this.file = filename;
            this.captureTree = CaptureNode::fromJSON(this.cacheData['base'], this, func(captureName, blockName) {
                return that.mapType(captureName, blockName);
            });
            //this.resultData = this.unserializeData(this.cacheData['resultData']);
            return true;
        }

        return false;
    },

    /**
     * load source file and process it to a CaptureNode tree
     *
     * @param string filename name
     * @param string? optional cache modifier to identify different versions of the same file (i.e. different compilation flags)
     * @return boolean true if file was retrieved from cache
     */
    loadSource: func(string filename, string? cacheModifier = null) {

        // try to load from cache

        var fromCache = false;

        if (this.transform.options['cache'] && this.cacheData === null) {
            fromCache = this.loadSourceFromCache(filename, cacheModifier);
        }

        // check if now available from cache, if not, parse

        if (fromCache !== true) {
            this.setSource(filename, fs.readFileSync(filename, 'UTF-8'), cacheModifier);
            return false;
        }

        return true;
    },

    /**
     * called by setSource() with raw source code
     *
     * @param string data unprocessed source code
     * @return string
     */
    preprocessRaw: func(string data) {
        return data.replace('\r\n', '\n');
    },

    /**
     * runs preprocess() on the capture tree
     *
     * @param state user-defined state object passed to every node
     */
    preprocess: func(state) {
        this.captureTree.preprocess(state);
    },

    /**
     * process the parse captures into output format
     *
     * @return string output string
     */
    process: func() {

        // generate result

        var result = this.captureTree[this.processMethod]();

        // write new data to cache (don't write it again if it just came from the cache)

        if (this.transform.options['cache'] && this.cacheData === null && fs.existsSync(this.file)) {

            if (this.forceNoCache) {
                application.log('LanguageParser', 'caching of ' + this.file + ' explicitly disabled');
            } else {
                this.transform.cache.insert(
                    this.file,
                    {
                        base        : this.captureTree.toJSON(),
                        //resultData  : this.serializeData(this.resultData)
                    },
                    this.cacheModifier
                );
            }
        }

        return result;
    },

    /**
     * runs prescan() on the capture tree
     *
     * @param state user-defined state object passed to every node
     */
    prescan: func(state) {
        this.captureTree.prescan(state);
    },

    /**
     * runs scan() on the capture tree
     *
     * @param state user-defined state object passed to every node
     */
    scan: func(state) {
        this.captureTree.scan(state);
    },

    /**
     * runs reset() on the capture tree
     *
     * @param state user-defined state object passed to every node
     */
    reset: func(state) {
        this.captureTree.reset(state);
    },
};
