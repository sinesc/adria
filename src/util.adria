/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var sysutil = require('util');
var crypto = require('crypto');

/**
 * enum type
 */
var Enumeration = func(options) {

    var bit = 0;

    for (var id in options) {
        if (this[options[id]] === undefined) {
            this[options[id]] = 1 << bit;
            bit += 1;
        }
        if (bit >= 32) {
            throw new Error('options is expected to be an array and contain <= 32 unique elements');
        }
    }

    return Object.freeze(this);
};

export Enum = func(options) {
    return new Enumeration(options);
};


/**
 * output an object with given recursion depth
 *
 * @param obj the object to output
 * @param depth recursion depth
 * @param showHidden also show hidden properties
 */
export dump = func(obj, depth, showHidden) {

    depth = (depth === undefined ? 2 : depth);
    showHidden = (showHidden === undefined ? false : showHidden);

    console.log(sysutil.inspect(obj, showHidden, depth));
};

/**
 * returns user home directory
 *
 * @return string
 */
export home = func() {
    return process.env[process.platform == 'win32' ? 'USERPROFILE' : 'HOME'];
};

/**
 * appends defaultExtension to fullname unless fullname already has a file extension
 *
 * @param fullname
 * @param defaultExtension
 * @return string
 */
export normalizeExtension = func(fullname, defaultExtension) {

    var slash = fullname.lastIndexOf('/');
    var baseName = slash > 0 ? fullname.slice(slash) : fullname;

    return (baseName.indexOf('.') > -1 ? fullname : fullname + defaultExtension);
};

/**
 * returns hexadecimal md5 hash for given input
 *
 * @param string input
 * @return string
 */
export md5 = func(input) {

    var md5sum = crypto.createHash('md5');
    md5sum.update(input);
    return md5sum.digest('hex');
};
