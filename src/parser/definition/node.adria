/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var Enum = require('../../util').Enum;
var Token = require('../../tokenizer/token');
var SyntaxException = require('../syntax_exception');

/**
 * Parser.Definition.Node constructor
 *
 * creates a new node for use in a definition block
 */
module Node = proto {

    children    : null,
    tokenType   : 0,
    match       : '',
    type        : 0,
    name        : '',
    capture     : '',
    label       : '',
    description : '',

    constructor: func() {
        this.children = [ ];
    },

    /**
     * checks if node has given child
     *
     * @param Node node
     * @return boolean
     */
    hasChild: func(Node node) {

        var children = this.children;

        for (var id in children) {

            if (children[id] == node) {
                return true;
            }
        }

        return false;
    },

    /**
     * adds a node to the list of child-nodes, ensuring that the exit node is always last
     *
     * @param Node node a definition node
     */
    add: func(Node node) {

        // definition parsing only detects duplicate pairs, prevent duplicate node insertion

        if (this.hasChild(node)) {
            return;
        }

        var children = this.children;

        if (node.type & Type.RETURN) {

            // return-nodes need to be last because entry -> exit always matches, so no other child would be considered after exit

            children.push(node);
            return node;

        } else {

            // normal nodes are to be added at the end - unless the last node is an exit node

            var lastId = children.length -1;

            if (lastId >= 0) {

                var lastChild = children[lastId];

                // if the last node is a return node, insert new node just before the return node

                if (lastChild.type & Type.RETURN) {

                    children[lastId] = node;
                    children.push(lastChild);
                    return node;
                }
            }
        }

        // no exit node as direct child found, just append to the list

        children.push(node);

        return node;
    },

    /**
     * creates a node and adds it to the end of the child nodes
     *
     * @param Tokenizer.Token.Type tokenType required to achive match
     * @param any match string or regular expression
     * @param string capture name to log capture under
     * @param string description text to use during error generation
     * @return Parser.Definition.Node the new node
     */
    createAndAdd: func(finite tokenType, match, string capture = '', string? description = '') {

        var node = new Node();
        node.capture        = capture;
        node.tokenType      = tokenType;
        node.match          = match;
        node.description    = (description != '' ? description : (capture != '' ? capture : match));

        return this.add(node);
    },

    /**
     * tests if the node matches given token directly
     *
     * @param Token token
     * @return boolean
     */
    matches: func(Token token) {

        // types have to overlap

        if ((token.type & this.tokenType) == 0) {
            return false;
        }

        // compare the string or regex match

        if (this.match == '') {
            return true;
        } else if (typeof this.match == 'string') {
            return token.data == this.match;
        } else {
            return this.match.test(token.data);
        }
    },

    /**
     * returns true if the current node can directly reach the root
     * exit without having to match any more tokens
     *
     * @param Array stack current stack
     */
    reachesExit: func(Array stack) {

        var children = this.children;
        var lastChild = children.length -1;

        // exit nodes always come last, so just look if the last node is an exit node

        if (children[lastChild].type == Type.RETURN) {

            if (stack.length == 0) {
                return true;
            } else {
                return stack[stack.length -1].node.reachesExit(stack.slice(0, -1));
            }
        }

        return false;
    },

    /**
     * returns list of tokens that would match a child of the node
     *
     * @param Definition language definition this node belongs to
     * @param Array stack current stack
     * @param object result internally used during recursion, same as function result
     */
    matchingTokens: func(definition, Array stack, object result = { }) {

        var children = this.children;

        for (var _, child in children) {

            if (child.type == Type.RETURN) {

                if (stack.length == 0) {
                    break;
                }

                var returnTo = stack[stack.length -1].node;
                returnTo.matchingTokens(definition, stack.slice(0, -1), result);

            } else if (child.type == Type.JUMP) {

                var jumpTo = definition.getBlock(child.match);
                jumpTo.matchingTokens(definition, stack.concat([ new StackItem(child, null) ]),result);

            } else if (child.type == Type.BLOCK) {

                child.matchingTokens(definition, stack, result);

            } else {

                result[child.description != '' ? child.description : (child.capture != '' ? child.capture : '"' + child.match + '"')] = true;

            }
        }

        return result;
    },

    /**
     * yields matches for given token recursively from node children
     *
     * @param Parser parser
     * @param Token token to match
     * @param Array definition-jump stack
     */
    filter: func*(parser, Token token, Array stack) {

        var children = this.children;
        var result;

        if (stack.length > 250) {
            var message = SyntaxException::unexpectedTokenMessage(true, parser, token, this, stack);
            throw new Exception('recursion too deep. last error:\n' + message + '\n');
        }

        for (var id = 0, len = children.length; id < len; id++) {

            var child = children[id];

            if (child.type == Type.JUMP) {

                // if this is a conditional jump, check if condition is met

                if (child.condition != '' && parser.checkCondition(child.condition, stack) == false) {
                    continue;
                }

                // push current child onto stack before recursing into another block and forward-yield its matches

                var blockRoot = parser.definition.getBlock(child.match);
                var generator = blockRoot.filter(parser, token, stack.concat(new StackItem(child, token)));

                while ((result = generator.next()).done == false) {
                    yield result.value;
                }

            } else if (child.type == Type.RETURN) {

                // reached bottom of the stack

                if (stack.length == 0) {
                    break;
                }

                // return to previous node on stack

                var top = stack[stack.length -1].node;
                var generator = top.filter(parser, token, stack.slice(0, -1));

                while ((result = generator.next()).done == false) {
                    result.value.minStack = Math.min(result.value.minStack, stack.length -1);
                    yield result.value;
                }

            } else if (child.matches(token)) {

                // yield direct match

                yield { node: child, stack: stack, minStack: stack.length };
            }

        }
    },

    /**
     * returns expected tokens for this node and its children
     *
     * @param Definition language definition this node belongs to
     * @param Array stack
     * @return string comma-separated list of expected tokens
     */
    toString: func(definition, Array stack) {

        var result = this.matchingTokens(definition, stack);
        return Object.keys(result).join(', ');
    },
};

/**
 * Node.Type enumeration
 *
 * @item NONE node is a normal matching node
 * @item BLOCK node is root of a definition block, the entry node in sdt
 * @item JUMP node references another definition block
 * @item RETURN node is a valid definition exit, the return node in sdt
 */
export Type = Enum([ 'NONE', 'BLOCK', 'JUMP', 'RETURN' ]);

/**
 * an item on the definition jump stack
 */
export StackItem = proto {
    node: null,
    token: null,
    constructor: func(Node node, Token token) {
        this.node = node;
        this.token = token;
    },
};