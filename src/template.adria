/*
 * The MIT License (MIT)
 *
 * Copyright (C) 2013 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var fs = require('fs');

/**
 * Simple object to support js inlining into template documents
 */
module Template = proto {

    basePath    : 'templates/',
    data        : null,
    regexp      : null,

    constructor: function(delimiterOpen = '<', delimiterClose = '>', delimiterStatement = ':', delimiterExpression = '=') {

        this.data = { };

        var openStatement   = RegExp.escape(delimiterOpen) + RegExp.escape(delimiterStatement);
        var closeStatement  = RegExp.escape(delimiterStatement) + RegExp.escape(delimiterClose);
        var openExpression  = RegExp.escape(delimiterOpen) + RegExp.escape(delimiterExpression);
        var closeExpression = RegExp.escape(delimiterExpression) + RegExp.escape(delimiterClose);

        var statement = '(' + openStatement + ').+?' + closeStatement;
        var expression = '(' + openExpression + ').+?' + closeExpression;
        var text = '(?:(?!' + openStatement + '|' + openExpression + ')[\\s\\S])+';

        this.regexp = new RegExp(statement + '|' + expression + '|' + text, 'g');

    },

    /**
     * assign data to template
     *
     * @param string name reference name from within template file
     * @param any value data to assign
     */
    assign: function(name, value) {

        this.data[name] = value;
    },

    parse: function(input) {

        var regexp = this.regexp;
        var match;
        var jsString = '';

        while (match = regexp.exec(input)) {

            // handle string, statement, expression

            if (match[1] === undefined && match[2] === undefined) {
                jsString += 'result += "' + match[0].jsify('"') + '";\n';
            } else if (match[1] !== undefined) {
                jsString += match[0].slice(2, -2) + '\n';
            } else if (match[2] !== undefined) {
                jsString += 'result += ' + match[0].slice(2, -2) + ';\n';
            }
        }

        return jsString;
    },

    exec: function(tplString) {

        var varDefs = 'var result = "";\n';

        for (var name, value in this.data) {
            varDefs += 'var ' + name + ' = data.' + name + ';\n';
        }

        var finalString = '(function(data) { ' + varDefs + tplString + 'return result; })(this)';

        return (function() {
            return eval(finalString);
        }).call(this.data);
    },

    fetch: function(input) {

        var tplString = this.parse(input);
        return this.exec(tplString);
    },

    fetchFile: function(file) {
        return this.fetch(fs.readFileSync(this.basePath + file, 'UTF-8'));
    },

};