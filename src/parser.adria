/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var path = require('path');
var util = require('./util');
var GeneratorState = require('./parser/generator_state');

export Definition = require('./parser/definition');

/**
 * Abstract parser. The parser uses groups of trees of match-nodes. During parsing, input tokens are tested
 * against the node tree. If a token matches, the following token has to be matched by a child of the current node.
 * This continues until a leaf is reached (in which case the token sequence is valid) or until a token does not match
 * any child, in which case processing continues with the remaining children of the current node-parent recursively
 * going down the tree.
 */
module Parser = proto {

    /**
     * the definition for the input language
     */
    definition: null,

    /**
     * a language-specific tokenizer instance
     */
    tokenizer: null,

    /**
     * name of the file being processed, for informational purposes only
     */
    file: 'unnamed',

    /**
     * if true, error messages will include a AST stack trace
     */
    includeTrace: true,

    /**
     * construct parser and set up new definition
     */
    constructor: func() {
        this.definition = new Definition('root');
    },

    /**
     * returns a clone of this object
     *
     * @return object
     */
    clone: func() {

        var parser = parent->clone();
        parser.definition = this.definition;
        parser.tokenizer = this.tokenizer;
        parser.file = this.file;
        parser.includeTrace = this.includeTrace;
        return parser;
    },

    /**
     * returns debug trace of the definition node stack
     *
     * @param token
     * @param node
     * @param stack
     */
    trace: func(token, node, stack) {

        // for output simplicy, add current node to stack

        stack = stack.slice();
        stack.push({ node: node, token: token });

        var id = stack.length -1;
        var result = '';
        var done = 0;
        var levelNode, levelToken;

        while (id--) {
            levelNode = stack[id].node;
            levelToken = stack[id].token;

            if (levelNode instanceof Object) {
                result += (id + 1) + '. ' + levelNode.name + (levelNode.capture !== '' ? ':' + levelNode.capture : '') + (levelNode.label !== '' ? '[' + levelNode.label + ']' : '');
            } else {
                result += 'null entry on stack';
            }

            result += ' at ' + levelToken.pos.toString() + ': ' + levelToken.data + '\n';

            // if after 15 items there are still more than 15 items on the stack, skip ahead to item 15

            if (done++ > 15 && id > 15) {
                id = 15;
                result += '...\n';
            }
        }

        return result;
    },

    /**
     * returns an error message based on current token, node and state of the stack
     *
     * @param token token where the error occured
     * @param node last node to actually match the token
     * @param stack stack at the time of the match
     * @return string error
     */
    errorMessage: func(token, node, stack) {

        var trace;
        var message = '$file: Unexpected token "$tokenData" $position. Expected: $validNodes\n';

        if (this.includeTrace) {
            trace = this.trace(token, node, stack);
            message += '\nTrace:\n$trace';
        }

        return message.format({
            file        : path.normalize(this.file),
            tokenData   : token.data,
            position    : token.pos.toString(),
            validNodes  : node.toString(this.definition, stack),
            trace       : trace
        });
    },

    /**
     * override to implement node match condition checking
     *
     * @param condition string
     * @param stack current node stack
     */
    checkCondition: func(condition, stack) {

        throw Exception('NYI: parser::checkCondition');
    },

    /**
     * process language string according to given definition
     *
     * @param string source input string to process
     */
    parse: func(source) {

        // create tokens from input string

        log('Parser', 'tokenizing', 2);
        var tokens = this.tokenizer.process(source, this.file);
        log('Parser', 'done', -2);

        if (tokens.length === 0) {
            throw new Exception(path.normalize(this.file) + ': File is empty.');
        }

        var node    = this.definition.getInitialBlock();
        var stack   = [];
        var len     = tokens.length;
        var tokenId = len;
        var maxId   = 0;
        var maxStack= [];
        var maxNode = node;
        var results = new Array(len);
        var success = false;
        var result, token;

        // create a GeneratorState for each token

        while (tokenId--) {
            results[tokenId] = new GeneratorState();
        }

        tokenId = 0;

        // process tokens

        log('Parser', 'processing ' + len + ' tokens according to currrent language definition');

        do {

            result = results[tokenId];

            // on first token visit, generate matching nodes

            if (result.generator === null) {
                token = tokens.get(tokenId);
                result.setGenerator(node.filter(this, token, stack), token);
            }

            // check for matches and store current matching node in result.node

            try {
                result.next();
            } catch (e) {
                if (e.message === 'nothing to yield') {
                    break;
                } else {
                    throw e;
                }
            }

            if (result.done) {

                // no more matches, discard this generator and go back one token

                result.setGenerator(null);
                tokenId--;

            } else if (tokenId === len -1) {

                // last token, cannot advance further, either reach exit or try next match for same token

                if (result.node.reachesExit(result.stack)) {
                    success = true;
                    break;
                } else {
                    continue;
                }

            } else {

                // a(nother) match was found, remember deepest positive match

                if (tokenId > maxId) {
                    maxId = tokenId;
                    maxStack = result.stack.slice(0);
                    maxNode = result.node;
                }
            
                // update node and go to next token

                node = result.node;
                stack = result.stack.slice(0);
                tokenId++;
            }

        } while (tokenId >= 0);

        // check result

        if (success === false) {
            if (maxId +1 === len) {
                throw new Exception(path.normalize(this.file) + ': Unexpected end of file.');
            } else {
                throw new Exception(this.errorMessage(tokens.get(maxId +1), maxNode, maxStack));
            }
        }

        return results;
    },

};
