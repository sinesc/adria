/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var Enum = require('./util').Enum;

export Result = require('./tokenizer/result');

/**
 * Splits strings into configurable types of tokens
 *
 * @param definition array of parser functions to use for token identification
 * @param extra array of additional token types to register with Type enum
 */
module Tokenizer = proto {

    /**
     * constructor
     *
     * @param definition array of parser functions to use for token identification
     * @param extra array of additional token types to register with Type enum
     */
    constructor: func(definition, extra) {

        this.definition = definition;

        // build type legend

        var legend = [];

        for (var id in definition) {
            legend.push(definition[id].name);
        }

        if (extra instanceof Array) {
            for (var id in extra) {
                legend.push(extra);
            }
        }

        this.Type = Enum(legend);
    },

    /**
     * process a string to an array of tokens
     *
     * @param data input string
     * @param filename used in error output
     * @return array of tokens
     */
    process: func(data, filename = 'unnamed') {

        var startPos = 0;
        var result = new Result(this);
        var col = 1;
        var row = 1;
        var definition = this.definition;
        var match, found;
        var lastMatch = null;

        // tokenize string

        while (startPos < data.length) {

            found = false;

            // try each parser until one matches

            for (var id, processor in this.definition) {

                match = processor.func(data, startPos, lastMatch);

                if (match !== null) {

                    if (match.data !== null && match.name !== null) {
                        result.add(match.data, this.Type[match.name], startPos, col, row);
                        lastMatch = match.data;
                    }

                    row += match.containedRows;
                    col = (match.containedRows === 0 ? col + match.lastRowLen : match.lastRowLen + 1);
                    found = true;
                    startPos += match.data.length;
                    break;
                }
            }

            // none of the parsers were able to match the next token, error out

            if (found !== true) {
                throw new Error(filename + ': no match found at row ' + row + ', column ' + col + ': "' + data.substr(startPos).split(/\r?\n/)[0] + '"');
            }
        }

        return result;
    },
};

/**
 * represents a single token match
 */
function Match(name, data, endPosition, containedRows, lastRowLen) {
    this.name = name;
    this.data = data;
    this.endPosition = endPosition;
    this.containedRows = containedRows;
    this.lastRowLen = lastRowLen;
}

/*
 * predefined tokenizer functions
 */
Tokenizer.prefab = new (func() {
    var regexFunc = func(name, regex, lastRegex = null, callback = null) {
        return {
            name: name,
            func: func(data, start, lastMatch) {
                var result = regex.exec(data.substr(start));

                if (result !== null && (lastRegex === null || lastRegex.exec(lastMatch) !== null)) {
                    var rows = result[0].occurances('\n');
                    var lastBreak = result[0].lastIndexOf('\n');
                    var lastRowLen = result[0].length - (lastBreak + 1);

                    var match = new Match(this.name, result[0], start + result[0].length, rows, lastRowLen);

                    if (typeof callback === 'function') {
                        return callback(match);
                    } else {
                        return match;
                    }
                }

                return null;
            }
        };
    };

    var regexEscape = func(regexString) {
        return RegExp.escape(regexString).replace('/', '\\/');
    };

    this.breaker = func() {
        return regexFunc(null, /^(\s+)/);
    };

    this.number = func(name) {
        return regexFunc(name, /^(\-?[0-9]+(\.[0-9]+)?(e\-?[0-9]+)?)/);
    };

    this.delimited = func(name, start, end) {

        start   = start || '"';
        end     = end || start;

        var regex = new RegExp('^(' + regexEscape(start) + '[\\s\\S]*?' + regexEscape(end) + ')');
        return regexFunc(name, regex);
    };

    this.regex = func(name, thisRegex, lastRegex, callback) {

        return regexFunc(name, thisRegex, lastRegex, callback);
    };

    var excludeFunc = func(match) {

        if (this.indexOf(match.data) !== -1) {
            return null;
        }

        return match;
    };

    this.exclude = func(name, regex, excluded) {

        return regexFunc(name, regex, null, excludeFunc.bind(excluded));
    };

    this.set = func(name, matches) {

        var escaped = [ ];

        for (var id in matches) {
            escaped.push(regexEscape(matches[id]));
        }

        var regex = new RegExp('^(' + escaped.join('|') + ')');

        return regexFunc(name, regex);
    };

    this.group = func(name, matches) {

        var escaped = [ ];

        for (var id in matches) {
            escaped.push(regexEscape(matches[id]));
        }

        var regex = new RegExp('^(' + '[' + escaped.join() + ']+)');

        return regexFunc(name, regex);
    };

    this.any = func(name) {
        return regexFunc(name, /^[^\s]*/);
    };

})();
