/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var Enum = require('./util').Enum;
var BaseException = require('./base_exception');

export DefinitionItem = require('./tokenizer/definition_item');
export Token = require('./tokenizer/token');
export Match = require('./tokenizer/match');
export prefabs = require('./tokenizer/prefabs');

/**
 * Splits strings into configurable types of tokens
 */
module Tokenizer = proto {

    /**
     * constructor
     *
     * @param Array definition array of parser functions to use for token identification
     * @param Array? extra array of additional token types to register with Type enum
     */
    constructor: func(Array definition, Array? extra = null) {

        // build type legend

        var legend = [];

        for (var id in definition) {
            legend.push(definition[id].name);
        }

        if (extra instanceof Array) {
            for (var id in extra) {
                legend.push(extra);
            }
        }

        this.definition = definition;
        this.Type = Enum(legend);
    },

    /**
     * process a string to an array of tokens
     *
     * @param string data input string
     * @param string filename used in error output
     * @return array of tokens
     */
    process: func(string data, string filename = 'unnamed') {

        var startPos    = 0;
        var result      = [];
        var col         = 1;
        var row         = 1;
        var lastMatch   = null;
        var match, found;

        // tokenize string

        while (startPos < data.length) {

            found = false;

            // try each parser until one matches

            for (var _, processor in this.definition) {

                match = processor.match(data, startPos, lastMatch);

                if (match !== null) {

                    if (match.data !== null && match.name !== null) {
                        result.push(new Token(match.data, this.Type[match.name], startPos, col, row));
                        lastMatch = match.data;
                    }

                    row += match.containedRows;
                    col = (match.containedRows === 0 ? col + match.lastRowLen : match.lastRowLen + 1);
                    found = true;
                    startPos += match.data.length;
                    break;
                }
            }

            // none of the parsers were able to match the next token, error out

            if (found !== true) {
                throw new BaseException(filename + ': invalid token at row ' + row + ', column ' + col + ': "' + data.substr(startPos).split(/\r?\n/)[0] + '"');
            }
        }

        return result;
    },
};
