/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var test = require('./test');

var Base = proto {
    value: 1,
    constructor: func(value = 4) {
        this.value = value;
    },
};

var Sub = proto (Base) {
    constructor: func(value = 3) {
        parent->constructor(value * 2);
    },
};

/*
 * tests
 */

test.group('test_proto');

test('proto statement', func() {

    proto Base {
    }

    proto Sub (Base) {
    }

    assert(typeof Base === 'function');
    assert(typeof Sub === 'function');
    assert((new Base) instanceof Base);
    assert((new Sub) instanceof Base);
});

test('null proto', func() {

    var P = null;

    try {
        P = proto (null) { };
    } catch (e) {
        test.fail(e.message);
    }

    var p = new P();

    assert((p instanceof P) && (p instanceof Object === false));
});

test('object proto', func() {

    var P = null;

    try {
        P = proto { };
    } catch (e) {
        test.fail(e.message);
    }

    var p = new P();

    assert((p instanceof P) && (p instanceof Object));
});

test('anonymous proto', func() {

    var X = (func() {
        return proto {
            value: 0,
            constructor: func() {
                this.value = 123;
            }
        };
    })();

    var x = new X();

    assert(x.value === 123);
    assert(X.prototype.constructor.name === 'Anonymous');
});

test('parent keyword', func() {

    // provide parameter

    var base = new Base(2);
    assert(base.value === 2);

    var sub = new Sub(2);
    assert(sub.value === 4);

    // default parameter

    var baseD = new Base();
    assert(baseD.value === 4);

    var subD = new Sub();
    assert(subD.value === 6);
});

test('self keyword', func() {

    var success = false;

    proto Single {
        funcA: func() {
            success = true;
        },
        funcB: func() {
            self::funcA();
        },
        funcC: func() {
            self::funcB();
        }
    }

    Single::funcC();

    assert(success);
});

test('self keyword (inheritance)', func() {

    var success = false;

    var Base = proto {
        funcA: func() {
            success = true;
        },
        funcB: func() {
            self::funcA();
        },
        funcC: func() {
            success = false;
        },
    };

    var Single = proto (Base) {
        funcA: func() {
            success = false;
        },
        funcB: func() {
            success = false;
        },
        funcC: func() {
            parent::funcB();
        },
        funcD: func() {
            self::funcC();
        },
    };

    Single::funcD();

    assert(success);
});

if (test.noSummary !== true) {
    test.summary();
}
