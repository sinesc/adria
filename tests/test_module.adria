/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis Möhlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var test = require('./test');

var Req = require('./data/require_module_export');

/*
 * tests
 */

test.group('test_module');

test('full module export', func() {

    assert(typeof Req === 'function');
    assert(Req === RequireModule);

    var req = new Req();
    assert(req instanceof RequireModule);
    assert(req.value === 'proto value');
});

test('property export', func() {

    assert(typeof Req.requireExport === 'object');
    assert(Req.requireExport instanceof Object === false);
});

test('export required', func() {

    var rex = Req.requireExport;

    assert(rex.varValue === 'var assigned value');

    assert(rex.someGlobal === reqExpSomeGlobal);
    assert(rex.someGlobal === 'global assign value');

    assert(rex.directValue === 'direct value');
});

test('mangling and export', func() {

    var rex = Req.requireExport;
    assert(rex.window === 'mangled export');
    assert(typeof window === 'object' && window !== 'mangled export');
});

test('mangling and module', func() {

    assert(typeof Req.RequireModuleMangled === 'function');

    var mangledModule = new Req.RequireModuleMangled();
    assert(mangledModule.value === 'mangled module proto value');

    assert(typeof window === 'object' && window !== Req.RequireModuleMangled);
});
