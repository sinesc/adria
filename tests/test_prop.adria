/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var test = require('./test');

/*
 * setup an object with a few properties
 */

var TestObj = proto {

    'stringField': 'stringFieldValue',
    plainField: 'plainFieldValue',
    testData: 'testData',

    nonStorageProp: prop {
        get: func() {
            return this.testData;
        },
        set: func(value) {
            this.testData = value;
        },
    },

    plainProp: prop {
        storage: 'plainPropStorage',
        default: null,
        get: func() {
            return storage;
        },
        set: func(value) {
            storage = value;
        },
    },

    'stringProp': prop {
        storage: 'stringPropStorage',
        default: null,
        get: func() {
            return storage;
        },
        set: func(value) {
            storage = value;
        },
    },

    anonStorageProp: prop {
        get: func() {
            return storage;
        },
        set: func(value) {
            storage = value;
        },
    },

    anonDefaultStorageProp: prop {
        default: 'anonStorageDefault',
        get: func() {
            return storage;
        },
        set: func(value) {
            storage = value;
        },
    }
};

var TestPropObj = proto {
    value: 1,
    myProp: prop {
        get: func() {
            return this.value;
        },
        set: func(value) {
            this.value = value;
        }
    },
};

/**
 * support function for property testing
 *
 * @param Type prototype constructor
 * @param propName property to test
 * @param storageName name of storage property for given property
 * @aram initialValue expected initial value in storage
 */
var testProp = func(Type, propName, storageName, initialValue) {

    var testObj = new Type();
    var testValue = propName + 'Test';

    assert(testObj[propName] === initialValue);
    assert(testObj[storageName] === initialValue, 'storage was properly initialized');

    testObj[propName] = testValue;
    assert(testObj[propName] === testValue);
    assert(testObj[storageName] === testValue);

    var descriptor = Object.getOwnPropertyDescriptor(testObj, propName);
    assert(descriptor === undefined);

    descriptor = Object.getOwnPropertyDescriptor(TestObj.prototype, propName);
    assert(typeof descriptor.get === 'function');
    assert(typeof descriptor.set === 'function');
    assert(descriptor.enumerable === false);
    assert(descriptor.configurable === false);

    descriptor = Object.getOwnPropertyDescriptor(TestObj.prototype, storageName);
    assert(descriptor.value === initialValue);
    assert(descriptor.writable === true);
    assert(descriptor.enumerable === false);
    assert(descriptor.configurable === false);
};

/*
 * tests
 */

test.group('test_prop');

test('direct object attachment', func() {

    var obj = {
        value: 1,
    };

    obj.test = prop {
        get: func() {
            return 123 * this.value;
        },
        set: func(val) {
            this.value = val;
        }
    };

    assert(obj.test === 123);

    obj.test = 2;

    assert(obj.test === 246);
});

test('simple fields', func() {

    var testObj = new TestObj();

    assert(testObj.stringField === 'stringFieldValue');
    assert(testObj.plainField === 'plainFieldValue');

    testObj.stringField = 'writeTest';
    assert(testObj.stringField === 'writeTest');

    var descriptor = Object.getOwnPropertyDescriptor(testObj, 'stringField');
    assert(descriptor.value === 'writeTest');
    assert(descriptor.writable === true);
    assert(descriptor.enumerable === true);
    assert(descriptor.configurable === true);
});

test('non-storage properties', func() {

    var testObj = new TestObj();

    assert(testObj.nonStorageProp === 'testData');
    assert(testObj._nonStorageProp === undefined, 'no storage was generated for non-storage property');

    testObj.nonStorageProp = 'writeTest';
    assert(testObj.nonStorageProp === 'writeTest');

    var descriptor = Object.getOwnPropertyDescriptor(testObj, 'nonStorageProp');
    assert(descriptor === undefined);

    descriptor = Object.getOwnPropertyDescriptor(TestObj.prototype, 'nonStorageProp');
    assert(typeof descriptor.get === 'function');
    assert(typeof descriptor.set === 'function');
    assert(descriptor.enumerable === false);
    assert(descriptor.configurable === false);
});

test('storage properties', func() {
    testProp(TestObj, 'plainProp', 'plainPropStorage', null);
});

test('string named storage properties', func() {
    testProp(TestObj, 'stringProp', 'stringPropStorage', null);
});

test('anon nodefault storage properties', func() {
    testProp(TestObj, 'anonStorageProp', '_anonStorageProp', undefined);
});

test('anon default storage properties', func() {
    testProp(TestObj, 'anonDefaultStorageProp', '_anonDefaultStorageProp', 'anonStorageDefault');
});

test('storage scope', func() {

    var ResObj = proto {
        plainProp: prop {
            storage: 'plainPropStorage',
            default: null,
            get: func() {
                return (func() {
                    return storage;
                })();
            },
            set: func(value) {
                (func() {
                    storage = value;
                })();
            },
        },
    };

    var test = new ResObj();
    assert(test.plainProp === null);

    test.plainProp = 'test';
    assert(test.plainProp === 'test');
});

test('prototype extension', func() {

    proto MyTestObj (TestObj) { }

    MyTestObj::myAnonStorageProp = prop {
        get: func() {
            return storage;
        },
        set: func(value) {
            storage = value;
        },
    };

    MyTestObj::myDefaultStorageProp = prop {
        default: 'my default value',
        storage: 'myDefaultStorage',
        get: func() {
            return storage;
        },
        set: func(value) {
            storage = value;
        },
    };

    var mytest = new MyTestObj();

    assert(mytest.myAnonStorageProp === undefined);
    assert(mytest.myDefaultStorageProp === 'my default value');
});

test('property inheritance (get)', func() {

    var InheritGet = proto (TestPropObj) {
        myProp: prop {
            inherit get,
            set: func(value) {
                this.value = value * 2;
            }
        }
    };

    var ig = new InheritGet();
    ig.myProp = 3;
    assert(ig.myProp === 6);
    assert(ig.value === 6);
});

test('property inheritance (set)', func() {

    var InheritSet = proto (TestPropObj) {
        myProp: prop {
            get: func() {
                return this.value * 2;
            },
            inherit set
        }
    };

    var ig = new InheritSet();
    ig.myProp = 3;
    assert(ig.myProp === 6);
    assert(ig.value === 3);
});

test('deep property inheritance', func() {

    var Intermediate = proto (TestPropObj) {
        value: prop {
            set: func(val) {
                storage = val * 8;
            },
            get: func() {
                return storage / 6;
            }
        }
    };

    var InheritSet = proto (Intermediate) {
        myProp: prop {
            get: func() {
                return this.value * 2;
            },
            inherit set
        }
    };

    var ia = new InheritSet();
    ia.myProp = 3;
    assert(ia.myProp === 8);
    assert(ia.value === 4);

    var InheritGet = proto (InheritSet) {
        myProp: prop {
            inherit get,
            set: func(val) {
                this.value = val * 8;
            },
        }
    };

    var ib = new InheritGet();
    ib.myProp = 1.5;            // 1.5 * 8 * 8 = 96 in storage
    assert(ib.myProp === 32);   // storage * 2 / 6  = 32
    assert(ib.value === 16);    // storage / 6 = 16
});

if (test.noSummary !== true) {
    test.summary();
}