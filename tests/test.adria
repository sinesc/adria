/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var Async = require('async');

// ensure the test was compiled with assertions enabled

var thrown = null;

try {
    assert(false);
} catch (e) {
    thrown = e;
}

if (thrown === null) {
    console.log('assertion support is disabled, please recompile with --assert');
    process.exit(1);
}

if (thrown.stack.split(':', 1)[0] !== 'AssertionFailedException') {
    console.log('incorrect assertion type thrown during pretest, environment incompatible');
    process.exit(1);
}

console.log('Adria unit tests, version {{version}}');

// set up module

var testId      = 0;
var testName    = '';
var start       = Date.now();
var last        = start;
var oks         = 0;
var fails       = 0;
var exceptions  = [ ];
var asyncTimer  = null;
var inAsync     = false;
var queue       = [ ];

/**
 * queues a test case
 *
 * @param string name test case name
 * @param int timout optional timeout in ms for async tests
 * @param function testFunction the function containing the test case, receives callback for async use as first parameter
 */
module test = func(name, timeout, testFunction) {

    // handle optional parameter async timeout

    if (typeof timeout === 'function') {
        testFunction = timeout;
        timeout = 1000;
    }

    queue.push({ type: 'test', name: name, test: testFunction, timeout: timeout });

    if (inAsync) {
        return;
    } else {
        consume();
    }
};

/**
 * an exception that includes test id and name in the stacktrace
 */
export TestException = proto (Exception) {

    testId: -1,
    testName: '',

    constructor: func(message) {

        Exception->constructor(message);

        this.testId = testId;
        this.testName = testName;

        var stack = this.stack.split('\n');
        stack.splice(1, 0, '    in test ' + testId + ': ' + testName);
        this.stack = stack.join('\n');
    }
};

/**
 * queues display of test results
 */
export summary = func() {

    queue.push({ type: 'summary' });

    if (inAsync) {
        return;
    } else {
        consume();
    }
};

/**
 * queues a new group of tests (display purposes only)
 */
export group = func(title) {

    queue.push({ type: 'group', title: title });

    if (inAsync) {
        return;
    } else {
        consume();
    }
};

/**
 * log a timestamped message to the console
 *
 * @param string message
 * @param boolean append newline, default true
 */
export log = func(message, nl = true) {

    var now         = Date.now();
    var diffStart   = now - start;
    var diffLast    = now - last;
    var timing      = '          ' + ('+' + diffLast + '/' + diffStart);

    last = now;

    process.stdout.write(timing.slice(-10) + 'ms: ' + message + (nl ? '\n' : ''));
};

/**
 * log a message to the console
 *
 * @param string message
 * @param boolean append newline, default true
 */
export print = func(message, nl = true) {

    process.stdout.write(message + (nl ? '\n' : ''));
};

/**
 * abort test and mark as failure
 *
 * @param string message
 */
export fail = func(message) {

    throw new TestException(message);
};

/**
 * consumes the next items in the queue until an asynchronous test is encountered and started
 */
var consume = func() {

    while (queue.length > 0) {

        var item = queue.shift();

        if (item.type === 'test') {
            if (runTest(item)) {
                break;  // break here on async test and wait for callback
            }
        } else if (item.type === 'group') {
            showGroup(item);
        } else if (item.type === 'summary') {
            showSummary();
        }
    }
};

/**
 * callback passed to async functions, registers the result and advances to next test
 *
 * @param Exception exception if not null, test is marked as failed and the exception is reported in the summary
 */
var asyncCallback = func(exception = null) {

    // callback was invoked before the the testfunction returned, ignore it, the function will be sync

    if (inAsync === false) {
        return;
    }

    // clear failover timeout, reset async status

    clearTimeout(asyncTimer);
    inAsync = false;
    asyncTimer = null;

    if (exception !== null) {
        exceptions.push(exception);
        fails++;
        print('(FAILED)');
    } else {
        oks++;
        print('(ok)');
    }

    // progress to next test

    consume();
};

/**
 * displays test summary
 */
var showSummary = func() {

    log((oks + fails) + ' tests done, ' + oks + ' ok, ' + fails + (fails > 0 ? ' FAILURES' : ' failures'));

    for (var id, exception in exceptions) {
        console.log('\nfailure ' + (+id + 1), exception.stack);
    }
};

var showGroup = func(item) {

    process.stdout.write('\n');
    log('group: ' + item.title);
};

/**
 * runs given test from queue
 *
 * @param Object item queue-item of the test
 * @return boolean true if in test is asynchronous
 */
var runTest = func(item) {

    var success = true;
    var asyncObject = null;

    testId++;

    // log to console and update global testId/testName

    log('test ' + testId + ': ' + item.name + ' ', false);
    testName = item.name;

    try {

        if ((asyncObject = item.test(asyncCallback)) instanceof Async) {

            // async test, exit here and wait for callback (or timeout failover)

            if (asyncObject.done !== true) {

                var exception = new TestException('Timeout after ' + item.timeout + 'ms');
                asyncTimer = setTimeout(asyncCallback.bind(this, exception), item.timeout);
                inAsync = true;

                return true;
            }
        }

    } catch (exception) {

        // test failed, log exception

        success = false;
        exceptions.push(exception);
        fails++;
        print('(FAILED)');
    }

    if (success) {

        oks++;
        print('(ok)');
    }

    return false;
};