/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var Async = require('async');
var test = require('./test');
var TestException = test.TestException;

// prepare some functions

var sleep = func(ms, callback) {
    setTimeout(func() {
        callback(null, ms);
    }, ms);
};

var sleepError = func(ms, callback) {
    setTimeout(func() {
        callback(new TestException('expected error'), 'not returned');
    }, ms);
};

var sleepThrow = func() {
    throw new TestException('expected error');
};

var asyncReturn = func#(#) {

    return await sleep(10, #);
};

var asyncAutoReturn = func#(#) {

    await sleep(10, #);
};

var asyncAutoCatch = func#(#) {

    await sleep(10, #);
    throw new TestException('catch please');
};


// tests

test('async return', func#(done) {

    var result = await asyncReturn(#);
    assert(result === 10);

    done();
});

test('async auto return', func#(done) {

    var failover = setTimeout(function() {
        done(new Exception('async did not return'));
    }, 100);

    var result = await asyncAutoReturn(#);
    assert(result === undefined);
    clearTimeout(failover);

    done();
});

test('async auto catch', func#(done) {

    var failover = setTimeout(function() {
        done(new Exception('async did not return'));
    }, 100);

    var caught = false;
    var result;

    try {
        result = await asyncAutoCatch(#);
    } catch (e) {
        assert(e instanceof TestException);
        caught = true;
    }

    assert(result === undefined);
    assert(caught === true);

    clearTimeout(failover);
    done();
});

// autocallback was tested above, using feature below

test('wrap, then await', func#(#) {

    var wrap = sleep(10, #);
    var result = await wrap;
    assert(result === 10);
});

test('await wrap', func#(#) {

    var result = await sleep(11, #);
    assert(result === 11);
});

test('wrap throwing', func#(#) {

    var wrap, thrown = false;

    try {
        wrap = await sleepThrow(10, #);
    } catch (e) {
        thrown = true;
        assert(e instanceof TestException);
    }

    assert(thrown === true);
});

test('wrap, then await', func#(#) {

    var wrap = sleep(10, #);
    var result = await wrap;
    assert(result === 10);
});

test('wrap throwing, await it', func#(#) {

    var wrap, result, thrown;

    try {
         wrap = sleepThrow(10, #);
    } catch (e) {
        assert(false);
    }

    try {
        result = await wrap;
    } catch (e) {
        thrown = e;
    }

    assert(thrown instanceof TestException && thrown.message === 'expected error');
});

test('wrap error, await it', func#(#) {

    var wrap, result, thrown;

    try {
         wrap = sleepError(10, #);
    } catch (e) {
        assert('never reached');
    }

    try {
        result = await wrap;
    } catch (e) {
        thrown = e;
    }

    assert(thrown instanceof TestException && thrown.message === 'expected error');
});

test('wrap and await multiple, array', func#(#) {

    var result = await [
        sleep(15, #),
        sleep(5, #),
        sleep(10, #),
    ];

    assert(result instanceof Array && result[0] === 15 && result[1] === 5 && result[2] === 10);
});

test('wrap and await multiple, object', func#(#) {

    var result = await {
        a: sleep(15, #),
        b: sleep(5, #),
        c: sleep(10, #),
    };

    assert(result instanceof Object && result.a === 15 && result.b === 5 && result.c === 10);
});

test('wrap and await multiple, single invalid argument', func#(#) {

    var result = undefined, thrown = undefined;

    try {
        result = await [
            sleep(15, #),
            sleep(5, func() { }),       // not a wrap op
        ];
    } catch (e) {
        thrown = e;
    }

    assert(result === undefined && thrown instanceof Async.AsyncException);
});

test('wrap and await multiple, single error', func#(#) {

    var result = undefined, thrown = undefined;

    try {
        result = await [
            sleepError(10, #),
            sleep(15, #),
        ];
    } catch (e) {
        thrown = e;
    }

    assert(result === undefined && thrown instanceof TestException && thrown.message === 'expected error');
});

test('wrap and await multiple, all error', func#(#) {

    var result = undefined, thrown = undefined;

    try {
        result = await [
            sleepError(10, #),
            sleepError(10, #),
        ];
    } catch (e) {
        thrown = e;
    }

    assert(result === undefined && thrown instanceof TestException && thrown.message === 'expected error');
});

if (test.noSummary !== true) {
    test.summary();
}