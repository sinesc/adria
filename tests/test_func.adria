/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis Möhlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var test = require('./test');

var testOptionals = func(number a, [ number b = 2, number c = 3, [ number d = 4 ] ]) {
    return [ a, b, c, d ];
};

var testDefaults = func(number a, b = 'test', number c = 3) {
    return [ a, b, c ];
};

/*
 * tests
 */

test.group('test_func');

test('default parameters', func() {

    var r = testDefaults(1);
    assert(r[0] == 1 && r[1] == 'test' && r[2] == 3);

    var s = testDefaults(1, 'works');
    assert(s[0] == 1 && s[1] == 'works' && s[2] == 3);

    var t = testDefaults(1, undefined, 4);
    assert(t[0] == 1 && t[1] == undefined && t[2] == 4);
});

test('type annotations/default parameters, base param', func() {

    var thrown = null;

    try {
        testDefaults('invalid type');
    } catch (e) {
        thrown = e;
    }

    assert(thrown instanceof AssertionFailedException);
});

test('type annotations/default parameters, default param', func() {

    var thrown = null;

    try {
        testDefaults(123, 'test2', 'invalid type');
    } catch (e) {
        thrown = e;
    }

    assert(thrown instanceof AssertionFailedException);
});

test('advanced optionals', func() {

    var r = testOptionals(1);
    assert(r[0] == 1 && r[1] == 2 && r[2] == 3 && r[3] == 4);
});

test('type annotations/advanced optionals, base param', func() {

    var thrown = null;

    try {
        testOptionals('invalid type');
    } catch (e) {
        thrown = e;
    }

    assert(thrown instanceof AssertionFailedException);
});

test('type annotations/advanced optionals, optional param', func() {

    var thrown = null;

    try {
        testOptionals(1, 'invalid', 3);
    } catch (e) {
        thrown = e;
    }

    assert(thrown instanceof AssertionFailedException);
});

if (test.noSummary != true) {
    test.summary();
}