/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var test = require('./test');

/*
 * setup two exceptions based on Exception
 */

proto TestException (Exception) {
    message: 'test123',
}

proto SubTestException (TestException) {
    message: 'subtest123',
}

/*
 * tests
 */

test('rethrow', function() {

    try {

        try {
            throw new TestException();
        } catch (SubTestException specific) {
            test.fail('caught unhandled exception');
        } catch (SubTestException specific) {
            test.fail('caught unhandled exception');
        }

    } catch (e) {
        assert(e instanceof TestException);
        return;
    }

    test.fail('failed to rethrow exception');
});

test('finally', function() {

    var ran = false;

    try {

        try {
            throw new TestException();
        } catch (SubTestException specific) {
            test.fail('caught unhandled exception');
        } finally {
            ran = true;
        }

        test.fail('running unreachable code');

    } catch (e) {
        assert(e instanceof TestException);
        assert(ran === true);
        return;
    }

    test.fail('failed to rethrow exception');
});

test('instanceof Error', function() {

    assert(Exception.prototype instanceof Error);
    assert(new Exception() instanceof Error);
});

test('inheritance, base', function() {

    try {
        throw new TestException();
    } catch (TestException e) {
        /* OK */
    } catch (e) {
        test.fail('not an instance of TestException');
    }
});

test('inheritance, sub', function() {

    try {
        throw new SubTestException();
    } catch (SubTestException e) {
        /* OK */
    } catch (TestException e) {
        test.fail('wrong type');
    } catch (e) {
        test.fail('not an instance of TestException');
    }
});

test('default message', function() {

    try {
        throw new TestException();
    } catch (e) {
        assert(e.message === 'test123');
    }
});

test('custom message', function() {

    try {
        throw new TestException('custom123');
    } catch (e) {
        assert(e.message === 'custom123');
    }
});

test('type-name', function() {

    try {
        throw new SubTestException();
    } catch (e) {
        assert(e.stack.split(':', 1)[0] === 'SubTestException');
    }
});

if (test.noSummary !== true) {
    test.summary();
}