/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var test = require('./test');

test.group('test_assert');

test('assert exception type', func() {

    var caught = false;

    try {
        assert(false);
    } catch (AssertionFailedException e) {
        caught = true;
    } catch (e) {
        test.fail('invalid assertion exception');
    }

    if (caught != true) {
        test.fail('no exception thrown');
    }
});

test('assert default message', func() {

    var caught = false;

    try {
        assert(true && false);
    } catch (AssertionFailedException e) {
        caught = true;
        if (e.message != 'true && false') {
            test.fail('asserion message wrong');
        }
    }

    if (caught != true) {
        test.fail('no exception thrown');
    }
});

test('assert user message', func() {

    var caught = false;

    try {
        assert(true && false, 'weird boolean operation');
    } catch (AssertionFailedException e) {
        caught = true;
        if (e.message != 'weird boolean operation') {
            test.fail('asserion message wrong');
        }
    }

    if (caught != true) {
        test.fail('no exception thrown');
    }
});

test('function argument checks', func() {

    import replace_with_assert; // requires postprocessing. cannot currently access assert.type from outside the base framework

    var allowNull = [ true, false ];
    var type = [ 'func', 'finite', 'scalar', 'number', 'string', 'boolean', 'object' ];
    var results = [
        [ undefined,  [ ] ],
        [ null,       [ ] ],
        [ NaN,        [ 'number' ] ],
        [ 0,          [ 'finite', 'scalar', 'number' ] ],
        [ 1,          [ 'finite', 'scalar', 'number' ] ],
        [ 3.14156,    [ 'finite', 'scalar', 'number' ] ],
        [ '',         [ 'string', 'scalar' ] ],
        [ '1',        [ 'string', 'scalar' ] ],
        [ 'false',    [ 'string', 'scalar' ] ],
    ];

    for (var a = 0; a < allowNull.length; ++a) {
        for (var t = 0; t < type.length; ++t) {
            for (var r = 0; r < results.length; ++r) {

                var input = results[r][0];
                var valid = results[r][1];

                var isError = false;
                var shouldNotError = allowNull[a] && input == null;
                var shouldError = (valid.indexOf(type[t]) == -1) && shouldNotError == false;

                try {
                    replace_with_assert.type(type[t], allowNull[a], input, '');
                } catch (AssertionFailedException e) {
                    isError = true;
                }

                if (isError != shouldError) {
                    test.fail('expected ' + (shouldError ? 'failure' : 'pass') + ' for type ' + type[t] + ' given value ' + input + (allowNull[a] ? ' (allow null)' : ''));
                }

            }
        }
    }
});

if (test.noSummary != true) {
    test.summary();
}