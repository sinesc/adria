/*
 * Adria transcompiler
 *
 * Copyright (C) 2014 Dennis MÃ¶hlmann <mail@dennismoehlmann.de>
 * Licensed under the MIT license.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var test = require('./test');

proto MixinA {
    ownPropertyA: 'MixinA::ownPropertyA',
    mixinProperty: 'MixinA::mixinProperty',
    mixinPropertyA: 'MixinA::mixinPropertyA',
}

proto MixinB {
    ownPropertyB: 'MixinB::ownPropertyB',
    mixinProperty: 'MixinB::mixinProperty',
    mixinPropertyB: 'MixinB::mixinPropertyB',
}

proto MixinC {
    ownPropertyC: 'MixinC::ownPropertyC',
    mixinProperty: 'MixinC::mixinProperty',
    mixinPropertyC: 'MixinC::mixinPropertyC',
}

/*
 * tests
 */

test.group('test_mixin');

test('simple mixin statement', func() {

    proto Base mixin (MixinA) {
        ownPropertyA: 'Base::ownPropertyA',
    }

    assert(MixinA::ownPropertyA === 'MixinA::ownPropertyA');
    assert(MixinA::mixinProperty === 'MixinA::mixinProperty');

    assert(Base::ownPropertyA === 'Base::ownPropertyA');
    assert(Base::mixinProperty === 'MixinA::mixinProperty');

    var instance = new Base();

    assert(instance.ownPropertyA === 'Base::ownPropertyA');
    assert(instance.mixinProperty === 'MixinA::mixinProperty');

    assert(instance instanceof Base);
});

test('multi mixin statement', func() {

    proto Base mixin (MixinA, MixinB) {
        ownPropertyA: 'Base::ownPropertyA',
        ownPropertyB: 'Base::ownPropertyB',
    }

    assert(Base::ownPropertyA === 'Base::ownPropertyA');
    assert(Base::ownPropertyB === 'Base::ownPropertyB');
    assert(Base::mixinProperty === 'MixinB::mixinProperty');
    assert(Base::mixinPropertyA === 'MixinA::mixinPropertyA');
    assert(Base::mixinPropertyB === 'MixinB::mixinPropertyB');

    var instance = new Base();

    assert(instance.ownPropertyA === 'Base::ownPropertyA');
    assert(instance.ownPropertyB === 'Base::ownPropertyB');
    assert(instance.mixinProperty === 'MixinB::mixinProperty');
    assert(instance.mixinPropertyA === 'MixinA::mixinPropertyA');
    assert(instance.mixinPropertyB === 'MixinB::mixinPropertyB');

    assert(instance instanceof Base);
});

test('inherit from mixin-proto', func() {

    var parentCalled = false;

    proto Base mixin (MixinA, MixinB) {
        constructor: func() {
            parentCalled = true;
        },
        ownPropertyA: 'Base::ownPropertyA',
        ownPropertyB: 'Base::ownPropertyB',
        ownPropertyC: 'Base::ownPropertyC',
    }

    proto Sub (Base) mixin (MixinC) {
        constructor: func() {
            parent->constructor();
        },
        ownPropertyA: 'Sub::ownPropertyA',
    }

    assert(Sub::ownPropertyA === 'Sub::ownPropertyA');
    assert(Sub::ownPropertyB === 'Base::ownPropertyB');
    assert(Sub::ownPropertyC === 'MixinC::ownPropertyC');
    assert(Sub::mixinProperty === 'MixinC::mixinProperty');
    assert(Sub::mixinPropertyA === 'MixinA::mixinPropertyA');
    assert(Sub::mixinPropertyB === 'MixinB::mixinPropertyB');
    assert(Sub::mixinPropertyC === 'MixinC::mixinPropertyC');

    var instance = new Sub();

    assert(instance.ownPropertyA === 'Sub::ownPropertyA');
    assert(instance.ownPropertyB === 'Base::ownPropertyB');
    assert(instance.ownPropertyC === 'MixinC::ownPropertyC');
    assert(instance.mixinProperty === 'MixinC::mixinProperty');
    assert(instance.mixinPropertyA === 'MixinA::mixinPropertyA');
    assert(instance.mixinPropertyB === 'MixinB::mixinPropertyB');
    assert(instance.mixinPropertyC === 'MixinC::mixinPropertyC');

    assert(instance instanceof Base);
    assert(instance instanceof Sub);

    assert(parentCalled);
});

test('literal syntax', func() {

    var Base = proto mixin (MixinA, MixinB) {
        ownPropertyA: 'Base::ownPropertyA',
    };

    assert(Base::ownPropertyA === 'Base::ownPropertyA');
    assert(Base::mixinProperty === 'MixinB::mixinProperty');
    assert(Base::mixinPropertyA === 'MixinA::mixinPropertyA');
    assert(Base::mixinPropertyB === 'MixinB::mixinPropertyB');

    assert((new Base) instanceof Base);

    var Base2 = proto Named mixin (MixinA, MixinB) {
        ownPropertyA: 'Base::ownPropertyA',
    };

    assert(Base2::ownPropertyA === 'Base::ownPropertyA');
    assert(Base2::mixinProperty === 'MixinB::mixinProperty');
    assert(Base2::mixinPropertyA === 'MixinA::mixinPropertyA');
    assert(Base2::mixinPropertyB === 'MixinB::mixinPropertyB');

    assert((new Base2) instanceof Base2);

    var Sub = proto Named (Base2) mixin (MixinC) {
        ownPropertyB: 'Sub::ownPropertyB',
    };

    assert(Sub::ownPropertyA === 'Base::ownPropertyA');
    assert(Sub::ownPropertyB === 'Sub::ownPropertyB');
    assert(Sub::mixinProperty === 'MixinC::mixinProperty');
    assert(Sub::mixinPropertyA === 'MixinA::mixinPropertyA');
    assert(Sub::mixinPropertyB === 'MixinB::mixinPropertyB');

    assert((new Sub) instanceof Base2);
    assert((new Sub) instanceof Sub);
});

if (test.noSummary !== true) {
    test.summary();
}
