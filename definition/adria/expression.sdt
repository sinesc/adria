
literal_expression {
    entry -> complex_literal -> return
    entry -> expression:expression -> return
}

expression {
    // a  and  a()
    entry -> base_literal:item -> return
    base_literal:item -> invoke_operation:call -> return

    // a && b
    base_literal:item -> binary_operation -> return
    invoke_operation:call -> binary_operation

    // a.b   a->b().c || ...
    base_literal:item -> access_operation -> return
    invoke_operation:call -> access_operation -> binary_operation
    access_operation -> ternary_operation -> return

    // a?b:c
    base_literal:item -> ternary_operation
    invoke_operation:call -> ternary_operation

    // a = b   or   a++
    entry -> ident:ident -> assignment_operation -> return
    entry -> storage_literal:storage -> assignment_operation
    assignment_operation -> binary_operation

    entry -> prefix_operation -> return
    entry -> unary_operation -> return

    // (a || b).c   (a || b)()

    entry -> brace_operation -> return
    brace_operation -> invoke_operation:call
    brace_operation -> access_operation

    // ()()

    invoke_operation:call -> invoke_operation:call

    // end on async wrap

    brace_operation -> async_wrap_operation:wrap -> return
    invoke_operation:call -> async_wrap_operation:wrap
    base_literal:item -> async_wrap_operation:wrap
}

brace_operation {
    // braced expression, continues with binary or access operation
    entry -> "(":brace_op -> expression:item -> ")":brace_op -> return
    ")":brace_op -> binary_operation -> return
    ")":brace_op -> access_operation -> return
    ")":brace_op -> invoke_operation:call -> return
    invoke_operation:call -> binary_operation
    invoke_operation:call -> access_operation
    invoke_operation:call -> invoke_operation:call
}

unary_operation {
    entry -> unary_operator -> expression:item -> return
}

binary_operation {
    entry -> binary_operator -> expression:item -> return
}

ternary_operation {
    entry -> "?":ternary_op -> literal_expression:true_expression -> ":":ternary_op -> literal_expression:false_expression -> return
}

assignment_operation {
    entry -> assignment_operator -> literal_expression:value -> return
    entry -> xfix_operator -> return
}

prefix_operation {
    // ++expression.assignable
    entry -> xfix_operator -> ident:ident -> return
    xfix_operator -> expression:item -> access_operation_types_assignable -> return
}

property_assignment_operation {
    // a::b = property...
    entry -> "=":passignment_op -> proto_body_property:value -> return
    entry -> ":=":passignment_op -> literal_expression:value -> return
}

access_operation {
    // degraded from generic expression to member access, cannot go back to generic, i.e. (a || b).c.d::e ...
    entry -> access_operation_types -> return
    access_operation_types -> invoke_operation:call -> return
    access_operation_types -> async_wrap_operation:wrap -> return
    access_operation_types -> access_operation -> return
    invoke_operation:call -> access_operation

    entry -> access_operation_types_assignable -> property_assignment_operation -> return
    entry -> access_operation_types_assignable -> assignment_operation -> return

    invoke_operation:call -> invoke_operation:call
    invoke_operation:call -> async_wrap_operation:wrap
}

invoke_operation {
    entry -> "(" -> ")" -> return
    "(" -> invoke_param_list -> ")"
}

async_wrap_operation {
    entry -> "(" -> async_wrap_param_list -> ")" -> return
}

/*
 * ary ops
 */

unary_operator {
    entry -> "+":unary_op -> return
    entry -> "-":unary_op -> return
    entry -> "!":unary_op -> return
    entry -> "new":unary_op -> return
    entry -> "typeof":unary_op -> return
    entry -> "delete":unary_op -> return
}

binary_operator {
    entry -> "+":binary_op -> return
    entry -> "-":binary_op -> return
    entry -> "*":binary_op -> return
    entry -> "/":binary_op -> return
    entry -> "%":binary_op -> return

    entry -> "==":binary_op -> return
    entry -> "===":binary_op -> return
    entry -> "!=":binary_op -> return
    entry -> "!==":binary_op -> return
    entry -> "<":binary_op -> return
    entry -> ">":binary_op -> return
    entry -> "<=":binary_op -> return
    entry -> ">=":binary_op -> return
    entry -> "&&":binary_op -> return
    entry -> "||":binary_op -> return

    entry -> "&":binary_op -> return
    entry -> "|":binary_op -> return
    entry -> "^":binary_op -> return
    entry -> "<<":binary_op -> return
    entry -> ">>":binary_op -> return
    entry -> "instanceof":binary_op -> return
    entry -> "in":binary_op -> return
}

/*
 * access ops
 */
access_operation_types_assignable {
    entry -> access_operation_member:member -> return
    entry -> access_operation_index:index -> return
    entry -> access_operation_proto:proto -> return
}

access_operation_types {
    entry -> access_operation_types_assignable -> return
    entry -> access_operation_protocall:pcall -> return
}

access_operation_member {
    entry -> "." -> name:item -> return
}

access_operation_index {
    entry -> "[" -> expression:item -> "]" -> return
}

access_operation_proto {
    entry -> "::" -> name:item -> return
}

access_operation_protocall {
    entry -> "->" -> name:item -> invoke_operation:call -> return
    //invoke_operation:call -> invoke_operation:call
}

/*
 * invoke op
 */

invoke_param_list {
    entry -> literal_expression:param -> return
    literal_expression:param -> "," -> literal_expression:param
}

async_wrap_param_list {

    // start with lit.exp. or #

    entry -> literal_expression:param[before]
    entry -> "#":param -> return

    // lit.exp may be followed by another or by a #

    literal_expression:param[before] -> ","[before] -> literal_expression:param[before]
    literal_expression:param[before] -> ","[before] -> "#":param

    // # may be followed by another literal expression, but must remain the only #

    "#":param -> ","[after] -> literal_expression:param[after]
    literal_expression:param[after] -> ","[after]-> literal_expression:param[after] -> return
}


/*
 * assignment ops
 */

assignment_operator {
    entry -> "=":assignment_op -> return

    entry -> "+=":assignment_op -> return
    entry -> "-=":assignment_op -> return
    entry -> "*=":assignment_op -> return
    entry -> "/=":assignment_op -> return
    entry -> "%=":assignment_op -> return

    entry -> "&&=":assignment_op -> return
    entry -> "||=":assignment_op -> return
    entry -> "^^=":assignment_op -> return

    entry -> "&=":assignment_op -> return
    entry -> "|=":assignment_op -> return
    entry -> "^=":assignment_op -> return
    entry -> "<<=":assignment_op -> return
    entry -> ">>=":assignment_op -> return
}

xfix_operator {
    entry -> "++":xfix_op -> return
    entry -> "--":xfix_op -> return
}