
proto_statement {

    // proto name [ ( [ parent ] ) ] [ mixin ( exp [, exp, ...] ) ] body

    entry -> "proto" -> ident:name -> "(" -> expression:parent -> ")" -> proto_body:body -> return
    ident:name -> proto_body:body
    "(" -> ")"

    ident:name -> proto_mixin
    ")" -> proto_mixin -> proto_body:body
}

proto_literal {

    // proto [ name ] [ ( [ parent ] ) ] [ mixin ( exp [, exp, ...] ) ] body

    entry -> "proto" -> "(" -> expression:parent -> ")" -> proto_body:body -> return
    "proto" -> ident:name -> "("
    ident:name -> proto_body:body
    "(" -> ")"
    "proto" -> proto_body:body

    "proto" -> proto_mixin
    ident:name -> proto_mixin
    ")" -> proto_mixin -> proto_body:body
}

proto_mixin {
    entry -> "mixin" -> "(" -> expression:mixin -> ")" -> return
    expression:mixin -> "," -> expression:mixin
}

new_proto_literal {

    // new parent(...) body

    entry -> "new" -> expression:parent -> "(" -> ")" -> proto_body:body -> return
    "(" -> function_param_list:param_list -> ")"
}

proto_body {
    entry -> "{" -> "}" -> return
    "{" -> proto_body_item:item -> "}"
    proto_body_item:item -> ","[any] -> proto_body_item:item

    // allow comma behind last literal item

    proto_body_item:item -> ","[last] -> "}"
}

proto_body_item {
    entry -> proto_access -> "constructor":key -> ":"[constructor] -> proto_body_constructor:value -> return

    entry -> proto_access -> name:key -> ":"
    entry -> proto_access -> string:key -> ":"
    ":" -> literal_expression:value -> return
    ":" -> property_literal:value -> return
}

proto_body_constructor {
    entry -> function_literal -> return
}

proto_access {
    entry -> return
    entry -> "public" -> return
    entry -> "protected" -> return
    entry -> "private" -> return
}
