
/*
 * declaration/definition
 */

module_statement {
    entry -> "module" -> dec_def -> return
}

export_statement {
    entry -> "export" -> dec_def -> return
}

import_statement {
    entry -> "import" -> dec_list -> return
}

var_def {
    entry -> "var" -> dec_def_list -> return
}

const_def {
    entry -> "const" -> dec_def_list -> return
}

global_def {
    entry -> "global" -> dec_def_list -> return
}

function_statement {
    entry -> "function" -> ident:name -> "(" -> ")" -> scope:body -> return
    "(" -> function_param_list:param_list -> ")"
}

proto_statement {
    // proto name [ ( [ parent ] ) ] body
    entry -> "proto" -> ident:name -> "(" -> expression:parent -> ")" -> proto_body:body -> return
    ident:name -> proto_body:body
    "(" -> ")"
}

generator_statement {
    entry -> "function" -> "*":generator -> ident:name -> "(" -> ")" -> scope:body -> return
    "(" -> function_param_list:param_list -> ")"
}

async_statement {
    entry -> "function" -> "#":async -> ident:name -> "(" -> ")" -> scope:body -> return
    "(" -> function_param_list:param_list -> ")"
}

/*
 * assert statement
 */

assert_statement {
    entry -> "assert" -> invoke_operation:call -> return
}

/*
 * array deconstruction
 */

deconstruct {
    //!todo recursive
    entry -> "[" -> ident:item -> "]" -> "=" -> literal_expression:source -> return
    ident:item -> "," -> ident:item
}

/*
 * statement groups
 */

statement {

    entry -> var_def:var_def -> t -> return

    entry -> if_statement:if -> return
    entry -> for_in_statement:for_in -> return
    entry -> for_count_statement:for_count -> return

    entry -> return_statement:control -> t -> return
    entry -> export_statement:export -> t -> return
    entry -> module_statement:module -> t -> return
    entry -> expression:expression -> t -> return

    entry -> const_def:const_def -> t -> return
    entry -> global_def:global_def -> t -> return
    entry -> deconstruct:deconstruct -> t -> return
    entry -> throw_statement:throw -> t -> return
    entry -> do_while_statement:do_while -> t -> return
    entry -> assert_statement:assert -> t -> return

    entry -> flow_statement:control -> t -> return

    entry -> while_statement:while -> return
    entry -> switch_statement:switch -> return
    entry -> function_statement:function -> return
    entry -> try_catch_finally_statement:try_catch_finally -> return
    entry -> proto_statement:proto -> return
    entry -> generator_statement:generator -> return

    entry -> import_statement:import -> t -> return
}

/*
 * statement terminator
 */

t {
    entry -> ";" -> return
}

/*
 * declaration lists
 */

dec_def {
    entry -> ident:name -> "=" -> literal_expression:value -> return
    entry -> ident:name -> return
}

dec_def_list {
    entry -> dec_def:item -> return
    dec_def:item -> "," -> dec_def:item
}

dec_list {
    entry -> ident:item -> return
    ident:item -> "," -> ident:item
}
